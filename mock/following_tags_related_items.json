[{
    "id": 421353,
    "uuid": "36570c6f425d8903a75e",
    "user": {
        "id": 10078,
        "url_name": "patorash",
        "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/10078/06a90b82def807b31d24205e4d17b383cb6ffd17/medium.png?1463468852",
        "following": false
    },
    "title": "axlsxで作ったExcelファイルをそのままpaperclip経由でs3に保存する",
    "created_at": "2016-09-08 15:18:19 +0900",
    "updated_at": "2016-09-08 15:18:19 +0900",
    "created_at_in_words": "4分",
    "updated_at_in_words": "4分",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }, {
        "name": "ActiveRecord",
        "url_name": "activerecord",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }, {
        "name": "paperclip",
        "url_name": "paperclip",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }, {
        "name": "Axlsx",
        "url_name": "axlsx",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/patorash/items/36570c6f425d8903a75e",
    "created_at_as_seconds": 1473315499,
    "tweet": true,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "# Axlsxでレポート作成してs3に保存したい\n\nRailsやっていたら管理画面とか作っているとレポートをExcelで出力してほしいと言われることがたくさんありますね。世の中Excelで動いてるんですよね。Excelはいろんな業務の糊のようなものですね。\n\nバイナリデータをDBに突っ込むと、DBの容量を食うのと、DBのバックアップ時間が長くなるという問題があるので、やっぱり安定のAmazon s3に保存したいなと思ったのですが、一時ファイルを作らずにpaperclip経由でそのままアップロードしたいなと思ったのです。\n\n# ここに書かないこと\n\n- Railsでのpaperclipの設定方法など\n\n# やってみた。\n\n## モデル\n\nモデルはReportモデルで、レポートの期間を指定するくらいです。\n\n```rb:Reportモデル\n# == Schema Information\n#\n# Table name: reports\n#\n#  id                   :integer          not null, primary key\n#  start_date           :date             not null\n#  end_date             :date             not null\n#  content_file_name    :string\n#  content_content_type :string\n#  content_file_size    :integer\n#  content_updated_at   :datetime\n#  created_at           :datetime         not null\n#  updated_at           :datetime         not null\n#\n\nclass Report < ActiveRecord::Base\n  has_attached_file :content\n  validates_attached_content_type :content,\n                                  content_type: %w(application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\nend\n```\n\n## レポート生成するRake Task\n\n```rb:report.rake\nnamespace :report do\n  desc 'Create Report'\n  task :create, \"start_date\", \"end_date\"\n  task create: :environment do |x, args|\n    unless args.start_date.present? && args.end_date.present?\n      puts \"Please input start_date and end_date.\"\n      next\n    end\n    start_date = Date.parse(args.start_date)\n    end_date = Date.parse(args.end_date)\n    range = start_date.to_time..end_date.to_time.end_of_day\n    Axlsx::Package.new do |p|\n      wb = p.workbook\n      default_style = wb.styles.add_style(font_name: 'ＭＳ Ｐゴシック', sz: 10)\n      wb.add_worksheet(name: 'Sheet1') do |sheet|\n        # レポートを作成する。サンプルなので適当\n        Foo.in_range(range).find_each do |foo|\n          row = [foo.name, foo.price]\n          sheet.add_row row, style: default_style\n        end\n      end\n\n      # ここからが本番\n      file = StringIO.new(p.to_stream.read)\n      # class_evalしてクラスをこじ開けて、paperclipで保存するときに必要なアクセサを追加する\n      file.class.class_eval { attr_accessor :original_filename, :content_type }\n      # 追加したアクセサに値を設定\n      file.original_filename = \"report_#{start_date.strftime('%Y%m')}.xlsx\"\n      file.content_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      report = Report.new(start_date: start_date,\n                          end_date: end_date,\n                          content: file)\n      # これをしていないとvalidates_attached_content_typeでエラーになる。\n      report.content.instance_write(:content_type, file.content_type)\n      # 保存！\n      report.save!\n    end\n  end\nend\n```\n\nすると、s3にExcelファイルが保存されました。やったね！\n\n# 参考URL\n\n- [How do I set content_type using StringIO to upload to S3 using PaperClip](http://stackoverflow.com/questions/24628212/how-do-i-set-content-type-using-stringio-to-upload-to-s3-using-paperclip)\n",
    "body": "\n<h1>\n<span id=\"axlsxでレポート作成してs3に保存したい\" class=\"fragment\"></span><a href=\"#axlsx%E3%81%A7%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Axlsxでレポート作成してs3に保存したい</h1>\n\n<p>Railsやっていたら管理画面とか作っているとレポートをExcelで出力してほしいと言われることがたくさんありますね。世の中Excelで動いてるんですよね。Excelはいろんな業務の糊のようなものですね。</p>\n\n<p>バイナリデータをDBに突っ込むと、DBの容量を食うのと、DBのバックアップ時間が長くなるという問題があるので、やっぱり安定のAmazon s3に保存したいなと思ったのですが、一時ファイルを作らずにpaperclip経由でそのままアップロードしたいなと思ったのです。</p>\n\n<h1>\n<span id=\"ここに書かないこと\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%93%E3%81%AB%E6%9B%B8%E3%81%8B%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>ここに書かないこと</h1>\n\n<ul>\n<li>Railsでのpaperclipの設定方法など</li>\n</ul>\n\n<h1>\n<span id=\"やってみた\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>やってみた。</h1>\n\n<h2>\n<span id=\"モデル\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%87%E3%83%AB\"><i class=\"fa fa-link\"></i></a>モデル</h2>\n\n<p>モデルはReportモデルで、レポートの期間を指定するくらいです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">Reportモデル</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c1\"># == Schema Information</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Table name: reports</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#  id                   :integer          not null, primary key</span>\n<span class=\"c1\">#  start_date           :date             not null</span>\n<span class=\"c1\">#  end_date             :date             not null</span>\n<span class=\"c1\">#  content_file_name    :string</span>\n<span class=\"c1\">#  content_content_type :string</span>\n<span class=\"c1\">#  content_file_size    :integer</span>\n<span class=\"c1\">#  content_updated_at   :datetime</span>\n<span class=\"c1\">#  created_at           :datetime         not null</span>\n<span class=\"c1\">#  updated_at           :datetime         not null</span>\n<span class=\"c1\">#</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Report</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">has_attached_file</span> <span class=\"ss\">:content</span>\n  <span class=\"n\">validates_attached_content_type</span> <span class=\"ss\">:content</span><span class=\"p\">,</span>\n                                  <span class=\"ss\">content_type</span><span class=\"p\">:</span> <span class=\"sx\">%w(application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"レポート生成するrake-task\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88%E7%94%9F%E6%88%90%E3%81%99%E3%82%8Brake-task\"><i class=\"fa fa-link\"></i></a>レポート生成するRake Task</h2>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">report.rake</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"n\">namespace</span> <span class=\"ss\">:report</span> <span class=\"k\">do</span>\n  <span class=\"n\">desc</span> <span class=\"s1\">'Create Report'</span>\n  <span class=\"n\">task</span> <span class=\"ss\">:create</span><span class=\"p\">,</span> <span class=\"s2\">\"start_date\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_date\"</span>\n  <span class=\"n\">task</span> <span class=\"ss\">create</span><span class=\"p\">:</span> <span class=\"ss\">:environment</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">|</span>\n    <span class=\"k\">unless</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">start_date</span><span class=\"o\">.</span><span class=\"n\">present?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">end_date</span><span class=\"o\">.</span><span class=\"n\">present?</span>\n      <span class=\"nb\">puts</span> <span class=\"s2\">\"Please input start_date and end_date.\"</span>\n      <span class=\"k\">next</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"no\">Date</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">start_date</span><span class=\"p\">)</span>\n    <span class=\"n\">end_date</span> <span class=\"o\">=</span> <span class=\"no\">Date</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">end_date</span><span class=\"p\">)</span>\n    <span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"o\">.</span><span class=\"n\">to_time</span><span class=\"o\">.</span><span class=\"n\">.end_date</span><span class=\"o\">.</span><span class=\"n\">to_time</span><span class=\"o\">.</span><span class=\"n\">end_of_day</span>\n    <span class=\"no\">Axlsx</span><span class=\"o\">::</span><span class=\"no\">Package</span><span class=\"o\">.</span><span class=\"n\">new</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">p</span><span class=\"o\">|</span>\n      <span class=\"n\">wb</span> <span class=\"o\">=</span> <span class=\"nb\">p</span><span class=\"o\">.</span><span class=\"n\">workbook</span>\n      <span class=\"n\">default_style</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">styles</span><span class=\"o\">.</span><span class=\"n\">add_style</span><span class=\"p\">(</span><span class=\"ss\">font_name</span><span class=\"p\">:</span> <span class=\"s1\">'ＭＳ Ｐゴシック'</span><span class=\"p\">,</span> <span class=\"ss\">sz</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n      <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">add_worksheet</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Sheet1'</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">sheet</span><span class=\"o\">|</span>\n        <span class=\"c1\"># レポートを作成する。サンプルなので適当</span>\n        <span class=\"no\">Foo</span><span class=\"o\">.</span><span class=\"n\">in_range</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">foo</span><span class=\"o\">|</span>\n          <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"o\">]</span>\n          <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">add_row</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"ss\">style</span><span class=\"p\">:</span> <span class=\"n\">default_style</span>\n        <span class=\"k\">end</span>\n      <span class=\"k\">end</span>\n\n      <span class=\"c1\"># ここからが本番</span>\n      <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"no\">StringIO</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"o\">.</span><span class=\"n\">to_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">)</span>\n      <span class=\"c1\"># class_evalしてクラスをこじ開けて、paperclipで保存するときに必要なアクセサを追加する</span>\n      <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">class</span><span class=\"o\">.</span><span class=\"n\">class_eval</span> <span class=\"p\">{</span> <span class=\"kp\">attr_accessor</span> <span class=\"ss\">:original_filename</span><span class=\"p\">,</span> <span class=\"ss\">:content_type</span> <span class=\"p\">}</span>\n      <span class=\"c1\"># 追加したアクセサに値を設定</span>\n      <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">original_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"report_</span><span class=\"si\">#{</span><span class=\"n\">start_date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y%m'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">.xlsx\"</span>\n      <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"s1\">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>\n      <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"no\">Report</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"ss\">start_date</span><span class=\"p\">:</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n                          <span class=\"ss\">end_date</span><span class=\"p\">:</span> <span class=\"n\">end_date</span><span class=\"p\">,</span>\n                          <span class=\"ss\">content</span><span class=\"p\">:</span> <span class=\"n\">file</span><span class=\"p\">)</span>\n      <span class=\"c1\"># これをしていないとvalidates_attached_content_typeでエラーになる。</span>\n      <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">instance_write</span><span class=\"p\">(</span><span class=\"ss\">:content_type</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">content_type</span><span class=\"p\">)</span>\n      <span class=\"c1\"># 保存！</span>\n      <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>すると、s3にExcelファイルが保存されました。やったね！</p>\n\n<h1>\n<span id=\"参考url\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83url\"><i class=\"fa fa-link\"></i></a>参考URL</h1>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/24628212/how-do-i-set-content-type-using-stringio-to-upload-to-s3-using-paperclip\" rel=\"nofollow\" target=\"_blank\">How do I set content_type using StringIO to upload to S3 using PaperClip</a></li>\n</ul>\n",
    "stock_users": []
}, {
    "id": 421350,
    "uuid": "f1099b8bc5046da5e87b",
    "user": {
        "id": 110715,
        "url_name": "takeo-asai",
        "profile_image_url": "https://avatars.githubusercontent.com/u/688080?v=3",
        "following": false
    },
    "title": "npmのコマンドを同時実行する",
    "created_at": "2016-09-08 15:09:46 +0900",
    "updated_at": "2016-09-08 15:09:46 +0900",
    "created_at_in_words": "13分",
    "updated_at_in_words": "13分",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "Node.js",
        "url_name": "node.js",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/99671b12d7d2688f35c262552f16c7cc9d10b873/medium.jpg?1390767445",
        "following": false,
        "versions": []
    }, {
        "name": "concurrently",
        "url_name": "concurrently",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 1,
    "comment_count": 0,
    "url": "http://qiita.com/takeo-asai/items/f1099b8bc5046da5e87b",
    "created_at_as_seconds": 1473314986,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "# ビルドしつつサーバーを立ち上げたい\n\n`npm`のコマンドを書いている時、複数のコマンドを同時に実行したくなることがあるかと思います。例えば`build --watch`しつつ`server up`したくなる時。何も考えず`&&`で繋いでしまうと、`build --watch && server up`ではwatchが終了しないかぎりローカルサーバーが立ち上がらない事になってしまい、やりたいこととは違ってしまうかと思います。\n\nそんな時、便利なのが`concurrently` https://www.npmjs.com/package/concurrently というパッケージです。\n\n```bash\n$ npm install concurrently -D\n```\nでインストール、使い方は、\n\n```bash\n$ concurrently \"command1 arg\" \"command2 arg\"\n```\nといった感じに同時に実行したいコマンドをダブルクオーテーションでくくってやればいいだけ。なので`npm start`でビルドしつつ監視、サーバーも立ち上げるには、\n\n```json:package.json\n{\n  \"scripts\": {\n    \"start\": \"build && concurrently \\\"build --watch\\\" \\\"server up\\\"\"\n  }\n}\n```\nと言った具合にできてしまいます。とても簡単ですね。\n",
    "body": "\n<h1>\n<span id=\"ビルドしつつサーバーを立ち上げたい\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A4%E3%81%A4%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ビルドしつつサーバーを立ち上げたい</h1>\n\n<p><code>npm</code>のコマンドを書いている時、複数のコマンドを同時に実行したくなることがあるかと思います。例えば<code>build --watch</code>しつつ<code>server up</code>したくなる時。何も考えず<code>&amp;&amp;</code>で繋いでしまうと、<code>build --watch &amp;&amp; server up</code>ではwatchが終了しないかぎりローカルサーバーが立ち上がらない事になってしまい、やりたいこととは違ってしまうかと思います。</p>\n\n<p>そんな時、便利なのが<code>concurrently</code> <a href=\"https://www.npmjs.com/package/concurrently\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://www.npmjs.com/package/concurrently</a> というパッケージです。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\n<span class=\"nv\">$ </span>npm install concurrently -D\n</pre></div></div>\n\n<p>でインストール、使い方は、</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\n<span class=\"nv\">$ </span>concurrently <span class=\"s2\">\"command1 arg\"</span> <span class=\"s2\">\"command2 arg\"</span>\n</pre></div></div>\n\n<p>といった感じに同時に実行したいコマンドをダブルクオーテーションでくくってやればいいだけ。なので<code>npm start</code>でビルドしつつ監視、サーバーも立ち上げるには、</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"start\"</span><span class=\"p\">:</span> <span class=\"s2\">\"build &amp;&amp; concurrently \\\"build --watch\\\" \\\"server up\\\"\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>と言った具合にできてしまいます。とても簡単ですね。</p>\n",
    "stock_users": [
        "takeo-asai"
    ]
}, {
    "id": 421348,
    "uuid": "2711e0d5461c65b6a377",
    "user": {
        "id": 673,
        "url_name": "kozo002",
        "profile_image_url": "https://avatars.githubusercontent.com/u/516249?v=3",
        "following": false
    },
    "title": "rubyでjavascriptみたいな関数渡しをする小技",
    "created_at": "2016-09-08 14:56:34 +0900",
    "updated_at": "2016-09-08 14:58:34 +0900",
    "created_at_in_words": "26分",
    "updated_at_in_words": "24分",
    "tags": [{
        "name": "Ruby",
        "url_name": "ruby",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0337fbcbff62fb8fa5d0b8be5c3b47d1115d91fc/medium.jpg?1418548649",
        "following": false,
        "versions": []
    }, {
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }],
    "stock_count": 1,
    "comment_count": 0,
    "url": "http://qiita.com/kozo002/items/2711e0d5461c65b6a377",
    "created_at_as_seconds": 1473314194,
    "tweet": true,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "## はじめに\n\nrailsで作業してて、以下のように配列をmapして別のメソッドに通した値を使いたいケースがありました\n\n```rb\nlocalized_column_names = Product.column_names.map { |column_name|\n  Product.human_attribute_name(column_name)\n}\n```\n\nこんな場合javascriptなら関数を渡せて簡潔なのにな、と思ったのです。\n以下のように\n\n```js\nconst localizedColumnNames = Product.columnNames.map(Product.humanAttributeName);\n```\n\n## rubyでやる場合はMethodオブジェクトで代用\n\nメソッドをMethodオブジェクトで渡せば可能なようです\n\n```rb\nlocalized_column_names = Product.column_names.map(&Product.method(:human_attribute_name))\n```\n\nオブジェクトを `do...end` のブロックのように解釈させるには頭に `&` を付けて引数として与えればOKです。\nこうすると内部的に `#to_proc` が呼ばれるのかな？\n\nまぁまぁ簡潔になりましたね\n",
    "body": "\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>railsで作業してて、以下のように配列をmapして別のメソッドに通した値を使いたいケースがありました</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre>\n<span class=\"n\">localized_column_names</span> <span class=\"o\">=</span> <span class=\"no\">Product</span><span class=\"o\">.</span><span class=\"n\">column_names</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">column_name</span><span class=\"o\">|</span>\n  <span class=\"no\">Product</span><span class=\"o\">.</span><span class=\"n\">human_attribute_name</span><span class=\"p\">(</span><span class=\"n\">column_name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>こんな場合javascriptなら関数を渡せて簡潔なのにな、と思ったのです。<br>\n以下のように</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre>\n<span class=\"kr\">const</span> <span class=\"nx\">localizedColumnNames</span> <span class=\"o\">=</span> <span class=\"nx\">Product</span><span class=\"p\">.</span><span class=\"nx\">columnNames</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">Product</span><span class=\"p\">.</span><span class=\"nx\">humanAttributeName</span><span class=\"p\">);</span>\n</pre></div></div>\n\n<h2>\n<span id=\"rubyでやる場合はmethodオブジェクトで代用\" class=\"fragment\"></span><a href=\"#ruby%E3%81%A7%E3%82%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AFmethod%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E4%BB%A3%E7%94%A8\"><i class=\"fa fa-link\"></i></a>rubyでやる場合はMethodオブジェクトで代用</h2>\n\n<p>メソッドをMethodオブジェクトで渡せば可能なようです</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre>\n<span class=\"n\">localized_column_names</span> <span class=\"o\">=</span> <span class=\"no\">Product</span><span class=\"o\">.</span><span class=\"n\">column_names</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"no\">Product</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"ss\">:human_attribute_name</span><span class=\"p\">))</span>\n</pre></div></div>\n\n<p>オブジェクトを <code>do...end</code> のブロックのように解釈させるには頭に <code>&amp;</code> を付けて引数として与えればOKです。<br>\nこうすると内部的に <code>#to_proc</code> が呼ばれるのかな？</p>\n\n<p>まぁまぁ簡潔になりましたね</p>\n",
    "stock_users": [
        "Ping"
    ]
}, {
    "id": 421326,
    "uuid": "63d6546ac3a9363228af",
    "user": {
        "id": 75770,
        "url_name": "og24715",
        "profile_image_url": "https://avatars.githubusercontent.com/u/8489199?v=3",
        "following": false
    },
    "title": "最小構成のES6モジュールを用いたフロントエンド開発環境",
    "created_at": "2016-09-08 13:45:22 +0900",
    "updated_at": "2016-09-08 13:56:11 +0900",
    "created_at_in_words": "約2時間",
    "updated_at_in_words": "約1時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "webpack",
        "url_name": "webpack",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/3882adb94d0119d46e0898cc872b6860c13e7b74/medium.jpg?1425612954",
        "following": false,
        "versions": []
    }, {
        "name": "babel",
        "url_name": "babel",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/72d17396f31881d952039f09ed304e29faaacdc8/medium.jpg?1431215425",
        "following": true,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/og24715/items/63d6546ac3a9363228af",
    "created_at_as_seconds": 1473309922,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "# はじめがき\nフロントエンドの開発環境複雑スギィ！\nES6モジュールが使える最小構成を目標とした覚書です。\n間違ってることあったら教えてください。\n\n# 環境\nMacbookPro\nnode.js v6.5.0\n\n# インストール\n\n```bash\n\n# プロジェクトフォルダの作成\nmkdir myProject && $_\n\n# package.jsonの生成 (エンター連打)\nnpm init\n\n# webpackのグローバルインストール\nnpm i -g webpack\n\n# webpackのローカルインストール\nnpm i --save-dev webpack\n\n# babelの一連パッケージをインストール\nnpm i --save-dev babel-core\nnpm i --save-dev babel-loader\nnpm i --save-dev babel-preset-es2015\n\n```\n\n# サンプルファイル\n\n```bash\nmkdir src/ && $_\ntouch animal.js  dog.js app.js cats.js\n```\n\n```js:animal.js\n\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\nexport default Animal;\n\n```\n```js:dog.js\nimport Animal from './animal';\n\nclass Dog extends Animal {\n  callName() {\n    alert(this.name);\n  }\n}\n\nconst dog = new Dog('Natsu');\ndog.callName();\n```\n\n```js:app.js\nimport cats from './cats';\n\nconsole.log(cats);\n```\n\n```js:cats.js\nconst cats = ['tama', 'kuro', 'tora'];\n\nexport default cats;\n```\n\nファイル構成はこうなります\n\n```bash:tree \nmyProject\n|-- node_modules/\n|-- src\n|    |-- animal.js\n|    |-- app.js\n|    |-- cats.js\n|    +-- dog.js\n|\n|-- .babelrc\n|-- package.json\n+-- webpack.config.js \n  \n```\n\n# babelの設定\n\n```json:.babelrc\n{\n  \"presets\": [\n    \"es2015\"\n  ]\n}\n\n```\n\n# webpackの設定\n\n`webpack`をコマンドラインで実行することで`entry`の依存関係を解決したファイルが`output`で記述したファイルで生成されます。\n\n```js:webpack.config.js\n\nmodule.exports = {\n  entry: ['dog.js', 'cats.js'],\n  output: {\n    path: './dist',\n    filename: 'bundle.js',\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n      },\n    ],\n  },\n},\n\n```\n\n## webpack.config.jsの書き方\n\n上の例では`bundle.js`にひとまとめされてしまうので、依存関係のあるファイルごとにファイルを生成する場合、以下のように`entry`をオブジェクトで指定します\n\n```diff:webpack.config.js\n...\n- entry: ['dog.js', 'cats.js'],\n+ entry: {\n    'dog': 'src/dog.js',\n    'app': 'src/app.js',\n  }\n  output: {\n    path: './dist',\n-   filename: 'bundle.js',\n+   filename: '[name].js'\n  },\n```\n\n# todo\nwebpack.config.jsの詳細\nwebpack -watch\n\n参考\n[webpack.config.jsの読み方、書き方](http://dackdive.hateblo.jp/entry/2016/04/13/123000)\n[ECMAScript6で書こう！WebPackとES6-loaderで環境を作り、ES6を先取り体験する方法]\n(https://liginc.co.jp/web/js/other-js/132046)\n",
    "body": "\n<h1>\n<span id=\"はじめがき\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%8C%E3%81%8D\"><i class=\"fa fa-link\"></i></a>はじめがき</h1>\n\n<p>フロントエンドの開発環境複雑スギィ！<br>\nES6モジュールが使える最小構成を目標とした覚書です。<br>\n間違ってることあったら教えてください。</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>MacbookPro<br>\nnode.js v6.5.0</p>\n\n<h1>\n<span id=\"インストール\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>インストール</h1>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\n\n<span class=\"c\"># プロジェクトフォルダの作成</span>\nmkdir myProject <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$_</span>\n\n<span class=\"c\"># package.jsonの生成 (エンター連打)</span>\nnpm init\n\n<span class=\"c\"># webpackのグローバルインストール</span>\nnpm i -g webpack\n\n<span class=\"c\"># webpackのローカルインストール</span>\nnpm i --save-dev webpack\n\n<span class=\"c\"># babelの一連パッケージをインストール</span>\nnpm i --save-dev babel-core\nnpm i --save-dev babel-loader\nnpm i --save-dev babel-preset-es2015\n\n</pre></div></div>\n\n<h1>\n<span id=\"サンプルファイル\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>サンプルファイル</h1>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nmkdir src/ <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$_</span>\ntouch animal.js  dog.js app.js cats.js\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">animal.js</span></div>\n<div class=\"highlight\"><pre>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Animal</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Animal</span><span class=\"p\">;</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">dog.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kr\">import</span> <span class=\"nx\">Animal</span> <span class=\"nx\">from</span> <span class=\"s1\">'./animal'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Dog</span> <span class=\"kr\">extends</span> <span class=\"nx\">Animal</span> <span class=\"p\">{</span>\n  <span class=\"nx\">callName</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"s1\">'Natsu'</span><span class=\"p\">);</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">callName</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kr\">import</span> <span class=\"nx\">cats</span> <span class=\"nx\">from</span> <span class=\"s1\">'./cats'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">cats</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">cats.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kr\">const</span> <span class=\"nx\">cats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'tama'</span><span class=\"p\">,</span> <span class=\"s1\">'kuro'</span><span class=\"p\">,</span> <span class=\"s1\">'tora'</span><span class=\"p\">];</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">cats</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<p>ファイル構成はこうなります</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">tree</span></div>\n<div class=\"highlight\"><pre>\nmyProject\n<span class=\"p\">|</span>-- node_modules/\n<span class=\"p\">|</span>-- src\n<span class=\"p\">|</span>    <span class=\"p\">|</span>-- animal.js\n<span class=\"p\">|</span>    <span class=\"p\">|</span>-- app.js\n<span class=\"p\">|</span>    <span class=\"p\">|</span>-- cats.js\n<span class=\"p\">|</span>    +-- dog.js\n<span class=\"p\">|</span>\n<span class=\"p\">|</span>-- .babelrc\n<span class=\"p\">|</span>-- package.json\n+-- webpack.config.js \n\n</pre></div>\n</div>\n\n<h1>\n<span id=\"babelの設定\" class=\"fragment\"></span><a href=\"#babel%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>babelの設定</h1>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">.babelrc</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"presets\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"es2015\"</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h1>\n<span id=\"webpackの設定\" class=\"fragment\"></span><a href=\"#webpack%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>webpackの設定</h1>\n\n<p><code>webpack</code>をコマンドラインで実行することで<code>entry</code>の依存関係を解決したファイルが<code>output</code>で記述したファイルで生成されます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'dog.js'</span><span class=\"p\">,</span> <span class=\"s1\">'cats.js'</span><span class=\"p\">],</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"s1\">'./dist'</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">'bundle.js'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">loaders</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'babel-loader'</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">},</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"webpackconfigjsの書き方\" class=\"fragment\"></span><a href=\"#webpackconfigjs%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9\"><i class=\"fa fa-link\"></i></a>webpack.config.jsの書き方</h2>\n\n<p>上の例では<code>bundle.js</code>にひとまとめされてしまうので、依存関係のあるファイルごとにファイルを生成する場合、以下のように<code>entry</code>をオブジェクトで指定します</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre>\n...\n<span class=\"gd\">- entry: ['dog.js', 'cats.js'],</span>\n<span class=\"gi\">+ entry: {</span>\n    'dog': 'src/dog.js',\n    'app': 'src/app.js',\n  }\n  output: {\n    path: './dist',\n<span class=\"gd\">-   filename: 'bundle.js',</span>\n<span class=\"gi\">+   filename: '[name].js'</span>\n  },\n</pre></div>\n</div>\n\n<h1>\n<span id=\"todo\" class=\"fragment\"></span><a href=\"#todo\"><i class=\"fa fa-link\"></i></a>todo</h1>\n\n<p>webpack.config.jsの詳細<br>\nwebpack -watch</p>\n\n<p>参考<br>\n<a href=\"http://dackdive.hateblo.jp/entry/2016/04/13/123000\" rel=\"nofollow\" target=\"_blank\">webpack.config.jsの読み方、書き方</a><br>\n<a href=\"https://liginc.co.jp/web/js/other-js/132046\" rel=\"nofollow\" target=\"_blank\">ECMAScript6で書こう！WebPackとES6-loaderで環境を作り、ES6を先取り体験する方法</a></p>\n",
    "stock_users": []
}, {
    "id": 421324,
    "uuid": "b9dcbf03fcf362a146a0",
    "user": {
        "id": 43207,
        "url_name": "rui_jp",
        "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/43207/f95195bd4eaf4480c0d8b735112c45405ef2b8bf/medium.png?1458619274",
        "following": false
    },
    "title": "Rails5 on Heroku で MongoDB に接続する",
    "created_at": "2016-09-08 13:42:56 +0900",
    "updated_at": "2016-09-08 13:42:56 +0900",
    "created_at_in_words": "約2時間",
    "updated_at_in_words": "約2時間",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }, {
        "name": "MongoDB",
        "url_name": "mongodb",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/666f5dc4780b97e9410ae3effeeb13fd64e17291/medium.jpg?1364839063",
        "following": false,
        "versions": []
    }, {
        "name": "Heroku",
        "url_name": "heroku",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/d77183eaf26189a59c14a189a23a004bb9bdecf4/medium.jpg?1364839078",
        "following": false,
        "versions": []
    }, {
        "name": "mongo",
        "url_name": "mongo",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/rui_jp/items/b9dcbf03fcf362a146a0",
    "created_at_as_seconds": 1473309776,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "\nローカルな環境で自前の`MongoDB`サーバーへの接続はこちら。\nhttp://qiita.com/rui_jp/items/f7ced849ddbf4e6cfeaf\n\n\n## 目標\n\n`Mongoid`を使用してHerokuのアドオン[mLab MongoDB](https://devcenter.heroku.com/articles/mongolab)に接続する。\n\n\n## 開発環境\n- [Ruby](https://www.ruby-lang.org/ja/) (2.2.4p230)\n- [Rails](https://rubygems.org/gems/rails/versions/5.0.0.1) (5.0.0.1)\n- [Mongoid](https://rubygems.org/gems/mongoid/versions/6.0.0.rc0) (6.0.0.rc0)\n\n\n## アドオンの追加\n\nアプリの`Resources`メニューからアドオン`mLab MongoDB`を追加。\n\n![heroku-mongo-1.png](https://qiita-image-store.s3.amazonaws.com/0/43207/a4b1037f-5368-01be-5781-d7e32708a364.png \"heroku-mongo-1.png\")\n\n![heroku-mongo-2.png](https://qiita-image-store.s3.amazonaws.com/0/43207/53e26ab4-897f-d0ca-ec01-d7ae7b2c7c68.png \"heroku-mongo-2.png\")\n\n\nアドオンを追加したらDBに接続するための情報は`heroku`コマンドで確認できます。\n\n```bash:console\n$ heroku config | grep MONGODB_URI\nMONGODB_URI: mongodb://<dbuser>:<dbpassword>@********.mlab.com:*****/<dbname>\n```\n\n## アプリ側の設定\n\n[ドキュメント](https://devcenter.heroku.com/articles/mongolab#connecting-to-your-mongodb-instance)\n\n### mongoid.yml\n\n`production:`項目を追加。\n\n```yaml:config/mongoid.yml\nproduction:\n  clients:\n    default:\n     uri: (MONGODB_URIの値)\n\n     options:\n       connect_timeout: 15\n```\n\n`database:``hosts:`ではなく`uri:`を使用します。\n\n### secrets.yml\n\ngitの管理から除外されていたら管理対象にしておきます。\n\n```yaml:config/secrets.yml\ndevelopment:\n  secret_key_base: (...)\n\ntest:\n  secret_key_base: (...) \n\nproduction:\n  secret_key_base: <%= ENV[\"SECRET_KEY_BASE\"] %>\n```\n\n```text:.gitignore\n#config/secrets.yml\n```\n",
    "body": "<p>ローカルな環境で自前の<code>MongoDB</code>サーバーへの接続はこちら。<br>\n<a href=\"http://qiita.com/rui_jp/items/f7ced849ddbf4e6cfeaf\" class=\"autolink\" id=\"reference-cd4bc72d6ac49d6e2311\">http://qiita.com/rui_jp/items/f7ced849ddbf4e6cfeaf</a></p>\n\n<h2>\n<span id=\"目標\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%A8%99\"><i class=\"fa fa-link\"></i></a>目標</h2>\n\n<p><code>Mongoid</code>を使用してHerokuのアドオン<a href=\"https://devcenter.heroku.com/articles/mongolab\" rel=\"nofollow\" target=\"_blank\">mLab MongoDB</a>に接続する。</p>\n\n<h2>\n<span id=\"開発環境\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>開発環境</h2>\n\n<ul>\n<li>\n<a href=\"https://www.ruby-lang.org/ja/\" rel=\"nofollow\" target=\"_blank\">Ruby</a> (2.2.4p230)</li>\n<li>\n<a href=\"https://rubygems.org/gems/rails/versions/5.0.0.1\" rel=\"nofollow\" target=\"_blank\">Rails</a> (5.0.0.1)</li>\n<li>\n<a href=\"https://rubygems.org/gems/mongoid/versions/6.0.0.rc0\" rel=\"nofollow\" target=\"_blank\">Mongoid</a> (6.0.0.rc0)</li>\n</ul>\n\n<h2>\n<span id=\"アドオンの追加\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%81%AE%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>アドオンの追加</h2>\n\n<p>アプリの<code>Resources</code>メニューからアドオン<code>mLab MongoDB</code>を追加。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/43207/a4b1037f-5368-01be-5781-d7e32708a364.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/43207/a4b1037f-5368-01be-5781-d7e32708a364.png\" alt=\"heroku-mongo-1.png\" title=\"heroku-mongo-1.png\"></a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/43207/53e26ab4-897f-d0ca-ec01-d7ae7b2c7c68.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/43207/53e26ab4-897f-d0ca-ec01-d7ae7b2c7c68.png\" alt=\"heroku-mongo-2.png\" title=\"heroku-mongo-2.png\"></a></p>\n\n<p>アドオンを追加したらDBに接続するための情報は<code>heroku</code>コマンドで確認できます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">console</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nv\">$ </span>heroku config <span class=\"p\">|</span> grep MONGODB_URI\nMONGODB_URI: mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@********.mlab.com:*****/&lt;dbname&gt;\n</pre></div>\n</div>\n\n<h2>\n<span id=\"アプリ側の設定\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E5%81%B4%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>アプリ側の設定</h2>\n\n<p><a href=\"https://devcenter.heroku.com/articles/mongolab#connecting-to-your-mongodb-instance\" rel=\"nofollow\" target=\"_blank\">ドキュメント</a></p>\n\n<h3>\n<span id=\"mongoidyml\" class=\"fragment\"></span><a href=\"#mongoidyml\"><i class=\"fa fa-link\"></i></a>mongoid.yml</h3>\n\n<p><code>production:</code>項目を追加。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">config/mongoid.yml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"l-Scalar-Plain\">production</span><span class=\"p-Indicator\">:</span>\n  <span class=\"l-Scalar-Plain\">clients</span><span class=\"p-Indicator\">:</span>\n    <span class=\"l-Scalar-Plain\">default</span><span class=\"p-Indicator\">:</span>\n     <span class=\"l-Scalar-Plain\">uri</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">(MONGODB_URIの値)</span>\n\n     <span class=\"l-Scalar-Plain\">options</span><span class=\"p-Indicator\">:</span>\n       <span class=\"l-Scalar-Plain\">connect_timeout</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">15</span>\n</pre></div>\n</div>\n\n<p><code>database:</code><code>hosts:</code>ではなく<code>uri:</code>を使用します。</p>\n\n<h3>\n<span id=\"secretsyml\" class=\"fragment\"></span><a href=\"#secretsyml\"><i class=\"fa fa-link\"></i></a>secrets.yml</h3>\n\n<p>gitの管理から除外されていたら管理対象にしておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">config/secrets.yml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"l-Scalar-Plain\">development</span><span class=\"p-Indicator\">:</span>\n  <span class=\"l-Scalar-Plain\">secret_key_base</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">(...)</span>\n\n<span class=\"l-Scalar-Plain\">test</span><span class=\"p-Indicator\">:</span>\n  <span class=\"l-Scalar-Plain\">secret_key_base</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">(...)</span> \n\n<span class=\"l-Scalar-Plain\">production</span><span class=\"p-Indicator\">:</span>\n  <span class=\"l-Scalar-Plain\">secret_key_base</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">&lt;%= ENV[\"SECRET_KEY_BASE\"] %&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">.gitignore</span></div>\n<div class=\"highlight\"><pre>\n#config/secrets.yml\n</pre></div>\n</div>\n",
    "stock_users": []
}, {
    "id": 421284,
    "uuid": "4fa997ae1e9d3aefba1a",
    "user": {
        "id": 36524,
        "url_name": "edwardkenfox",
        "profile_image_url": "https://secure.gravatar.com/avatar/d32564792887e3fb5955021f9804c0a6",
        "following": false
    },
    "title": "karmaで実行するJavaScriptのテストにdebuggerを仕込む",
    "created_at": "2016-09-08 10:53:38 +0900",
    "updated_at": "2016-09-08 10:56:22 +0900",
    "created_at_in_words": "約4時間",
    "updated_at_in_words": "約4時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "mocha",
        "url_name": "mocha",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/19f55d3f429ae93863dff5df972b5fe3ca1cde69/medium.jpg?1431962966",
        "following": false,
        "versions": []
    }, {
        "name": "karma",
        "url_name": "karma",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/f2f23c6ff3601def6e13a632b85c572e03b7d04c/medium.jpg?1443430727",
        "following": false,
        "versions": []
    }],
    "stock_count": 1,
    "comment_count": 0,
    "url": "http://qiita.com/edwardkenfox/items/4fa997ae1e9d3aefba1a",
    "created_at_as_seconds": 1473299618,
    "tweet": true,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "## 実行環境\n\n- npm: 3.9.5\n- karma: 0.13.10\n\n## 手順\n\n1. テスト対象のJavaScriptコード、あるいはテストコードでブレイクポイント貼りたい箇所に `debugger` を記述\n- `--single-run=false` オプションを追加してkarmaを実行\n    - 例: `$ karma start ./karma.conf.js --browsers=PhantomJS_custom --single-run=false`\n    - package.jsonにscriptsとして保存しておくと、`npm test`といったショートカットで実行できるので楽\n- karmaのプロセスにdebuggerが刺さるので、http://localhost:9000/webkit/inspector/inspector.html?page=2 を開く\n- Happy debugging!\n\n参考: [Debugging Karma Unit Tests](http://bahmutov.calepin.co/debugging-karma-unit-tests.html)\n",
    "body": "\n<h2>\n<span id=\"実行環境\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>実行環境</h2>\n\n<ul>\n<li>npm: 3.9.5</li>\n<li>karma: 0.13.10</li>\n</ul>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<ol>\n<li>テスト対象のJavaScriptコード、あるいはテストコードでブレイクポイント貼りたい箇所に <code>debugger</code> を記述</li>\n<li>\n<code>--single-run=false</code> オプションを追加してkarmaを実行\n\n<ul>\n<li>例: <code>$ karma start ./karma.conf.js --browsers=PhantomJS_custom --single-run=false</code>\n</li>\n<li>package.jsonにscriptsとして保存しておくと、<code>npm test</code>といったショートカットで実行できるので楽</li>\n</ul>\n</li>\n<li>karmaのプロセスにdebuggerが刺さるので、<a href=\"http://localhost:9000/webkit/inspector/inspector.html?page=2\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://localhost:9000/webkit/inspector/inspector.html?page=2</a> を開く</li>\n<li>Happy debugging!</li>\n</ol>\n\n<p>参考: <a href=\"http://bahmutov.calepin.co/debugging-karma-unit-tests.html\" rel=\"nofollow\" target=\"_blank\">Debugging Karma Unit Tests</a></p>\n",
    "stock_users": [
        "2kei7"
    ]
}, {
    "id": 421256,
    "uuid": "500dc01c2ec08a2fa756",
    "user": {
        "id": 28369,
        "url_name": "Yunosuke21",
        "profile_image_url": "https://si0.twimg.com/profile_images/3473555245/d77ae8bc6826b83d99732242acc6afbd_normal.jpeg",
        "following": false
    },
    "title": "『プログラマの考え方がおもしろいほど身につく本』で学んだ問題解決の考え方",
    "created_at": "2016-09-08 09:07:34 +0900",
    "updated_at": "2016-09-08 11:30:25 +0900",
    "created_at_in_words": "約6時間",
    "updated_at_in_words": "約4時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "プログラミング",
        "url_name": "%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/d963570322a6f743adcd3c1da5a54467a314abf7/medium.jpg?1445935920",
        "following": false,
        "versions": []
    }, {
        "name": "プログラマの考え方がおもしろいほど身につく本",
        "url_name": "%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9e%e3%81%ae%e8%80%83%e3%81%88%e6%96%b9%e3%81%8c%e3%81%8a%e3%82%82%e3%81%97%e3%82%8d%e3%81%84%e3%81%bb%e3%81%a9%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8f%e6%9c%ac",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 5,
    "comment_count": 4,
    "url": "http://qiita.com/Yunosuke21/items/500dc01c2ec08a2fa756",
    "created_at_as_seconds": 1473293254,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "#問題を細分化して考える。\nある問題を解こうとした時、そのまま解くのではなく、細分化して考えることが大切。\n\n#問題の類似を考えて、応用できないかを考える。\n細分化と繋がってくるが、まずは類似した問題を以前解いたことがないかを考える。\n\n#例 以下の図形を作るプログラムを考える。(本書ではC++で書かれているが、僕はJSで書く。)\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃\n＃＃＃＃\n＃＃\n\n#手順①\n＃だけ出力するプログラムを書く\n\n```\ndocument.write('#');\n```\n#手順②\n＃＃＃＃＃＃＃＃を出力するプログラムを書く\n\n```\nfor (var i = 0; i <= 8; i ++){\n     document.write('#')\n};\n```\n\n#手順③\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\nを出力するプログラムを書く。\n\n```\nfor (var i = 0; i <= 4; i++){\n     for(var j = 0; j <= 8; j++){\n          document.write('#')\n     };\n     document.write('<br>')\n};\n\n```\n\n#手順④\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃\n＃＃＃＃\n＃＃\nを出力するプログラムを書く。\n\n```\nfor (var i = 0; i < 4; i++) {\n     for (var j = 0; j < 8 - i*2; j++) {\n          document.write('#')\n     };\n     document.write('<br>')\n};\n```\n\n#結論\n図形の全体を出力するプログラムを一気に組もうとすると大変。\nだから、小さい部分から初めて、徐々に大きくしていくことが大切。\n\n類似としては、\n\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃＃＃\n\nを初めに考えて、次に\n\n＃＃＃＃＃＃＃＃\n＃＃＃＃＃＃\n＃＃＃＃\n＃＃\n\nを作るためにどうするかを考えれば良い。\n\n以上。\n",
    "body": "\n<h1>\n<span id=\"問題を細分化して考える\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E3%82%92%E7%B4%B0%E5%88%86%E5%8C%96%E3%81%97%E3%81%A6%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>問題を細分化して考える。</h1>\n\n<p>ある問題を解こうとした時、そのまま解くのではなく、細分化して考えることが大切。</p>\n\n<h1>\n<span id=\"問題の類似を考えて応用できないかを考える\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E3%81%AE%E9%A1%9E%E4%BC%BC%E3%82%92%E8%80%83%E3%81%88%E3%81%A6%E5%BF%9C%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%8B%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>問題の類似を考えて、応用できないかを考える。</h1>\n\n<p>細分化と繋がってくるが、まずは類似した問題を以前解いたことがないかを考える。</p>\n\n<h1>\n<span id=\"例-以下の図形を作るプログラムを考える本書ではcで書かれているが僕はjsで書く\" class=\"fragment\"></span><a href=\"#%E4%BE%8B-%E4%BB%A5%E4%B8%8B%E3%81%AE%E5%9B%B3%E5%BD%A2%E3%82%92%E4%BD%9C%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E8%80%83%E3%81%88%E3%82%8B%E6%9C%AC%E6%9B%B8%E3%81%A7%E3%81%AFc%E3%81%A7%E6%9B%B8%E3%81%8B%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8C%E5%83%95%E3%81%AFjs%E3%81%A7%E6%9B%B8%E3%81%8F\"><i class=\"fa fa-link\"></i></a>例 以下の図形を作るプログラムを考える。(本書ではC++で書かれているが、僕はJSで書く。)</h1>\n\n<p>＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃<br>\n＃＃＃＃<br>\n＃＃</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順①</h1>\n\n<p>＃だけ出力するプログラムを書く</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\ndocument.write('#');\n</pre></div></div>\n\n<h1>\n<span id=\"手順-1\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86-1\"><i class=\"fa fa-link\"></i></a>手順②</h1>\n\n<p>＃＃＃＃＃＃＃＃を出力するプログラムを書く</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nfor (var i = 0; i &lt;= 8; i ++){\n     document.write('#')\n};\n</pre></div></div>\n\n<h1>\n<span id=\"手順-2\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86-2\"><i class=\"fa fa-link\"></i></a>手順③</h1>\n\n<p>＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃<br>\nを出力するプログラムを書く。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nfor (var i = 0; i &lt;= 4; i++){\n     for(var j = 0; j &lt;= 8; j++){\n          document.write('#')\n     };\n     document.write('&lt;br&gt;')\n};\n\n</pre></div></div>\n\n<h1>\n<span id=\"手順-3\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86-3\"><i class=\"fa fa-link\"></i></a>手順④</h1>\n\n<p>＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃<br>\n＃＃＃＃<br>\n＃＃<br>\nを出力するプログラムを書く。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nfor (var i = 0; i &lt; 4; i++) {\n     for (var j = 0; j &lt; 8 - i*2; j++) {\n          document.write('#')\n     };\n     document.write('&lt;br&gt;')\n};\n</pre></div></div>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p>図形の全体を出力するプログラムを一気に組もうとすると大変。<br>\nだから、小さい部分から初めて、徐々に大きくしていくことが大切。</p>\n\n<p>類似としては、</p>\n\n<p>＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃＃＃</p>\n\n<p>を初めに考えて、次に</p>\n\n<p>＃＃＃＃＃＃＃＃<br>\n＃＃＃＃＃＃<br>\n＃＃＃＃<br>\n＃＃</p>\n\n<p>を作るためにどうするかを考えれば良い。</p>\n\n<p>以上。</p>\n",
    "stock_users": [
        "umeume66",
        "Shibata_tadano",
        "opponitur",
        "ppl",
        "suteki"
    ]
}, {
    "id": 421249,
    "uuid": "96b37ef94885510c1b6b",
    "user": {
        "id": 117583,
        "url_name": "annie",
        "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/117583/b11b5b35e45d6e3239536c492b84860bbf7d6df0/medium.png?1469499115",
        "following": false
    },
    "title": "人工知能パーツ Microsoft Cognitive Services を使った表情分析アプリを作ろう！ (Emotion API × JavaScript 編)",
    "created_at": "2016-09-08 08:17:08 +0900",
    "updated_at": "2016-09-08 09:40:47 +0900",
    "created_at_in_words": "約7時間",
    "updated_at_in_words": "約6時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "Microsoft",
        "url_name": "microsoft",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/33f7bc94654564c44e4d9f9a11513c27223a0db7/medium.jpg?1465429151",
        "following": false,
        "versions": []
    }, {
        "name": "CognitiveServices",
        "url_name": "cognitiveservices",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/c52a1aa4b2c5ca9b350b33c345dae75a67725571/medium.jpg?1465428943",
        "following": false,
        "versions": []
    }],
    "stock_count": 3,
    "comment_count": 0,
    "url": "http://qiita.com/annie/items/96b37ef94885510c1b6b",
    "created_at_as_seconds": 1473290228,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "#Microsoft Cognitive Services を使った表情分析 Web アプリ\nMicrosoft Cognitive Services は 画像、文章、言語、情報を処理する機能を API 経由で利用できるサービスです。\nCognitive Services の一つである Emotion API では、画像を分析して人間の顔やその表情を数値化し、結果を JSON 形式で取得することができます。\n\n今回は オンライン画像 (URL) を入力すると、顔の表示位置と表情分析スコアを表示する Web アプリを作成します。JavaScript (jQuery 使用) で記述しており、Web サーバーがなくてもローカルでも実行＆動作確認ができます。\n![表情分析アプリ(JS)完成形](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png)\n\n#手順\n- Cognitive Services 利用に必要な環境、サブスクリプションの準備\n    - 開発環境\n    - Microsoft アカウント\n    - Cognitive Services サブスクリプション\n    - ハンズオンファイル一式\n- Web アプリの実装\n    - ハンズオンファイルの確認\n    - 表示ページの作成\n    - Emotion API を 呼び出すロジックの作成\n\n#Cognitive Services 利用に必要な環境、サブスクリプションの準備\n##開発環境\n今回は [Visual Studio Code](http://www.visualstudio.com/products/code-vs) を使用します。もちろんご自分の コーディングツールや Web 開発環境でも大丈夫です。\n>インストール方法は [Visual Studio Code のインストール方法](http://qiita.com/annie/items/cd24a22eae7f07536dd1) をご覧ください。\n\n##Microsoft アカウント\n次のステップで行うサブスクリプションの申し込みに必要ですので、持っていない場合は取得しておきます。\n>[Microsoft アカウント登録手続き](https://www.microsoft.com/ja-jp/msaccount/signup/default.aspx)\n\n##Cognitive Services サブスクリプション\n試用は無料ですが、こちらの手順でサブスクリプション申し込みが必要です。\n>申し込み方法は [Microsoft Cognitive Services サブスクリプション申し込み編](http://qiita.com/annie/items/ba6392b7d1a7647adc4b) をご覧ください。\n\n##ハンズオンファイル一式\n今回作成する Web アプリ は下記のようなシンプルな構成になっています。\n\n- index.html\n- css\n    - site.css\n- scripts\n    - script.js\n    - jquery-3.1.0.min.js\n- image\n    - Rectangle.png //認識された顔の位置を表示するための正方形(透過png)\n\n[一式ダウンロード(zipファイル)](https://emotionwebsto.blob.core.windows.net/handson/EmotionWeb.zip) からダウンロードして、ZIPを展開してローカルの適当な位置に配置します。\n展開した後、念のため読み取り専用属性を外しておきます。WindowsOS ではフォルダーを右クリックして *プロパティ* を表示して、*読み取り専用* のチェックボックスを外して *OK* をクリックします。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_021.png)\n\n#Web アプリの実装\n以下、アプリの実装部分を記述していきます。\n##ハンズオンファイルの確認\nVisual Studio Code を起動し、上部ツールバーの *[ファイル]* → *[フォルダーを開く]* をクリックします。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_03.png)\n\nダウンロードして準備した *EmotionWeb* フォルダーまで移動して選択し、*[フォルダーの選択]* をクリックして確定します。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_04.png)\n\n*EmotionWeb* フォルダーの内容が表示されるのを確認してください。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_05.png)\n\nこれらのファイルをベースにコードを記述していきます。\n\n##表示ページの作成 (index.html, site.css)\n###index.html の編集\n*index.html* をクリックしてエディター画面に表示します。\nhead 部分には CSS および JavaScript ファイルが挿入されています。\n\n```index.html\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>Emotion API Sample</title>\n    <link rel=\"stylesheet\" href=\"css/site.css\">\n    <script src=\"scripts/jquery-3.1.0.min.js\"></script>\n    <script src=\"scripts/script.js\"></script>\n</head>\n```\n\nbody 本体に画像URLを入力する TextBox と、画像および分析結果を表示する部分を、以下の通り記述します。\n\n```index.html\n<body>\n    <div>\n        <h1>Microsoft Cognitive Services</h1>\n        <h2>Emotion API Sample</h2>\n        <!--画像のURLを入力-->\n        <input type=\"url\" id=\"imageUrlTextbox\" class=\"urlinput\">\n    </div>\n\n    <table>\n        <tr>\n            <td class=\"OutputTh\">\n                <!--出力結果-->\n                <div id=\"OutputDiv\">Output</div>\n            </td>\n            <td>\n                <!--出力画像-->            \n                <div id=\"PhotoDiv\">\n                <img id=\"ImageToAnalyze\">\n                <img src=\"image/Rectangle.png\" id=\"Rectangle\">\n                </div>\n            </td>\n        </tr>\n    </table>\n</body>\n```\n\n上部ツールバーの [*ファイル*]→[*保存*] をクリック (または *Ctrl+S*) して *index.html* を保存します。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_06.png)\n\n###site.css の編集\n*site.css* をクリックしてエディター画面に表示します。\nbody 部分に font-family が指定されています。\n\n```site.css\nbody\n{\n    font-family: \"Yu Gothic\"; /* 環境に合わせてお好みのフォントを使用してください */\n}\n```\n\n画面表示に必要なサイズ、フォーマットを以下のように記述します。\n\n```site.css\n/* URL TextBox のサイズ指定 */\n.urlinput\n{\n    width: 600px;\n}\n\n\n/* 分析結果の表示テーブルのフォーマット指定 */\ntd.OutputTh\n{\n    text-align: left;\n    vertical-align: top;\n    width: 300px;\n}\n\n/* 画像の表示フォーマット指定 */\n#PhotoDiv{\n  position: relative;\n}\n\n/* 顔認識 (正方形) のフォーマット指定 */\n#Rectangle\n{\n    opacity: 0.5;\n    z-index: 10;\n    position: absolute;\n    display: none;\n}\n```\n\n*site.css* を保存します。\n\n###画面の確認\n\nここで index.html をブラウザーで開きます。\nタイトルや URL 入力部分などが表示されるのを確認してください。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_07.png)\n\n##Emotion API を 呼び出すロジックの作成 (script.js)\n*script.js* をクリックしてエディター画面に表示します。\nfunction() の中に画像を表示する showImage() と 画像を分析する getFaceInfo() が記述されています。ここからそれらのロジックを記述していきます。\n\n```script.js\n$(function () {\n\n    showImage();    // 画像を画面に表示\n    getFaceInfo();  // 画像を分析\n\n});\n```\n\n###画像を画面に表示する (showImage)\ntextBox に入力された文字列を imageUrl で取得して画面に表示するロジックを、function() 内部に以下のように記述します。\n\n```script.js\n$(function () {\n\n    // 画像を画面に表示\n    var showImage = function () {\n        var imageUrl = $(\"#imageUrlTextbox\").val();\n        if (imageUrl) {\n            $(\"#ImageToAnalyze\").attr(\"src\", imageUrl);\n        }\n    };\n\n    showImage();    // 画像を画面に表示\n    getFaceInfo();  // 画像を分析\n\n});\n```\n\n###画像を分析する (getFaceInfo)\n**EmotionAPI の呼び出しに必要なパラメーターの取得、初期メッセージのセット**\nshowImage の下に、getFaceInfo を追加します。\nEmotion API の サブスクリプションキー、画像URL、Emotion API の呼び出し URL を以下のように記述します。合わせて画面に表示する初期メッセージも記述しています。\n\n```script.js\n$(function () {\n\n    // 画像を画面に表示\n    var showImage = function () {\n    :\n    };\n\n    //画像の分析    \n    var getFaceInfo = function () {\n\n        // Emotion API の Subscription Key をセット\n        // お持ちの Subscription Key をコピーしてください\n        var subscriptionKey = \"YOUR_SUBSCRIPTION_KEY\";\n\n        // 画像 URL をセット\n        var imageUrl = $(\"#imageUrlTextbox\").val();\n\n        // Emotion API 呼び出し URL をセット\n        var webSvcUrl = \"https://api.projectoxford.ai/emotion/v1.0/recognize\";\n\n        // 画面に表示するメッセージをセット\n        var outputDiv = $(\"#OutputDiv\");\n\n        if(document.getElementById('imageUrlTextbox').value==\"\")\n        {\n            // 初期設定\n            outputDiv.text(\"画像のURLを入力してください\");\n        }\n        else{\n            // 画像分析中\n            outputDiv.text(\"分析中...\");\n        }\n    \n        // Emotion API を呼び出すためのパラメーターをセットして呼び出し\n        // **次の項目で作成します**\n\n    };\n\n    showImage();    // 画像を画面に表示\n    getFaceInfo();  // 画像を分析\n\n});\n```\n\n**Emotion APIを呼び出して画像分析結果を取得**\nEmotion API を呼び出すパラメーターをセットして呼び出すロジックを下記のように記述します。\n>分析結果を取得できたかどうかは data.length を調べて判定します。\n\n```script.js\n$(function () {\n:\n    var getFaceInfo = function () {\n\n:\n        // Emotion API を呼び出すためのパラメーターをセットして呼び出し\n        $.ajax({\n            type: \"POST\",\n            url: webSvcUrl,\n            headers: { \"Ocp-Apim-Subscription-Key\": subscriptionKey },\n            contentType: \"application/json\",\n            data: '{ \"Url\": \"' + imageUrl + '\" }'\n        }).done(function (data) {\n\n\n            // データが取得出来た場合\n            if (data.length > 0) {\n                // 検出された顔の表示位置を取得\n                // 画面に描画\n                // 検出された表情スコアを取得\n                // 表情スコアを表示\n                // **次の項目で作成します**\n            }\n            // データが取得できなかった場合\n            else {\n                outputDiv.text(\"検出できませんでした\");\n            }\n\n        // エラー処理\n        }).fail(function (err) {\n            if(document.getElementById('imageUrlTextbox').value!=\"\")\n            {\n                $(\"#OutputDiv\").text(\"ERROR!\" + err.responseText);\n            }   \n        });\n\n    };\n\n    showImage();\n    getFaceInfo();\n\n});\n```\n\n**画像分析結果を加工して表示**\n取得した画像分析データ (顔の表示位置、表情スコア) を加工して表示するロジックを下記のように記述します。\n>画像に 正方形の画像 (image/Rectangle.png) を #Rectangle で重ね合わせて表示し、顔の表示位置を表します。表情スコアは小数点6位までを残して OutputText にセットし、outputDiv で表記します。\n\n```script.js\n$(function () {\n:\n    var getFaceInfo = function () {\n\n:\n        // Emotion API を呼び出すためのパラメーターをセットして呼び出し\n        :\n\n            // データが取得出来た場合\n            if (data.length > 0) {\n                // 検出された顔の表示位置を取得\n                var faceRectange = data[0].faceRectangle;\n                var faceWidth = faceRectange.width;\n                var faceHeight = faceRectange.height;\n                var faceLeft = faceRectange.left;\n                var faceTop = faceRectange.top;\n\n                // 画面に描画\n                $(\"#Rectangle\").css(\"top\", faceTop);\n                $(\"#Rectangle\").css(\"left\", faceLeft);\n                $(\"#Rectangle\").css(\"height\", faceHeight);\n                $(\"#Rectangle\").css(\"width\", faceHeight);\n                $(\"#Rectangle\").css(\"display\", \"block\");\n\n                //小数点6位までを残す関数 (表情スコアの丸めに利用)\n                function floatFormat( number ) {\n                    return Math.round( number * Math.pow( 10 , 6 ) ) / Math.pow( 10 , 6 ) ;\n                }\n\n                // 検出された表情スコアを取得\n                var faceScore = data[0].scores;\n                var faceAnger = floatFormat(faceScore.anger);\n                var faceContempt =  floatFormat(faceScore.contempt);\n                var faceDisgust = floatFormat(faceScore.disgust);\n                var faceFear = floatFormat(faceScore.fear);\n                var faceHappiness = floatFormat(faceScore.happiness);\n                var faceNeutral = floatFormat(faceScore.neutral);\n                var faceSadness = floatFormat(faceScore.sadness);\n                var faceSurprise = floatFormat(faceScore.surprise);                \n\n                // 表情スコアを表示\n                var outputText = \"\";\n                outputText += \"<h3>\" + \"結果:\" + \"</h3>\";\n                outputText += \"怒り　　: \" + faceAnger + \"<br>\";\n                outputText += \"軽蔑　　: \" + faceContempt + \"<br>\";\n                outputText += \"ムカつき: \" + faceDisgust + \"<br>\";\n                outputText += \"恐れ　　: \" + faceFear + \"<br>\";\n                outputText += \"喜び　　: \" + faceHappiness + \"<br>\";\n                outputText += \"無表情　: \" + faceNeutral + \"<br>\";\n                outputText += \"悲しみ　: \" + faceSadness + \"<br>\";\n                outputText += \"驚き　　: \" + faceSurprise + \"<br>\";\n\n                outputDiv.html(outputText);\n\n            }\n            // データが取得できなかった場合\n            :\n\n    };\n\n    showImage();\n    getFaceInfo();\n\n});\n```\n\n\n**URL変更時の動作 (再度分析＆表示)**\ntextBox が変更されたときに再度分析&表示するロジックを下記のように記述します。\n> 顔の位置を示す正方形 (#Rectangle) を一旦消去します。(hideMakers)\n\n```script.js\n$(function () {\n\n    // 画像を画面に表示\n    var showImage = function () {\n    :\n    };\n    // 画像の分析\n    var getFaceInfo = function () {\n    :\n    };\n\n    // 表示するものがない場合\n    var hideMarkers = function () {\n        $(\"#Rectangle\").css(\"display\", \"none\");\n    };\n\n    // URL が変更された場合（再度分析＆表示)\n    $(\"#imageUrlTextbox\").change(function () {\n        hideMarkers();\n        showImage();\n        getFaceInfo();\n    });\n\n    showImage();\n    getFaceInfo();\n\n});\n```\n\n*script.js* を忘れずに保存します。\n\n#アプリケーションの動作確認\nindex.html をブラウザーで開きます。\n![](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_08.png)\n\nオンライン画像の URL (例えばこちら↓) をコピーして、テキストボックスにペーストします。\nhttps://emotionwebsto.blob.core.windows.net/handson/emotionweb_happiness.jpg\n\n\n画像と分析結果が表示されれば、アプリケーションは完成です。\n![表情分析アプリ(JS)完成形](https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png)\n\n\n#Appendix\n同じソースを Web 公開しました。動作確認にご利用ください。\nhttp://emotionwebsample.azurewebsites.net/\nまた、完成形のソースコードを GitHub にて公開しました。\nhttps://github.com/a-n-n-i-e/CognitiveEmotionAPI-EmotionWeb-JS\n",
    "body": "\n<h1>\n<span id=\"microsoft-cognitive-services-を使った表情分析-web-アプリ\" class=\"fragment\"></span><a href=\"#microsoft-cognitive-services-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E8%A1%A8%E6%83%85%E5%88%86%E6%9E%90-web-%E3%82%A2%E3%83%97%E3%83%AA\"><i class=\"fa fa-link\"></i></a>Microsoft Cognitive Services を使った表情分析 Web アプリ</h1>\n\n<p>Microsoft Cognitive Services は 画像、文章、言語、情報を処理する機能を API 経由で利用できるサービスです。<br>\nCognitive Services の一つである Emotion API では、画像を分析して人間の顔やその表情を数値化し、結果を JSON 形式で取得することができます。</p>\n\n<p>今回は オンライン画像 (URL) を入力すると、顔の表示位置と表情分析スコアを表示する Web アプリを作成します。JavaScript (jQuery 使用) で記述しており、Web サーバーがなくてもローカルでも実行＆動作確認ができます。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png\" alt=\"表情分析アプリ(JS)完成形\"></a></p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<ul>\n<li>Cognitive Services 利用に必要な環境、サブスクリプションの準備\n\n<ul>\n<li>開発環境</li>\n<li>Microsoft アカウント</li>\n<li>Cognitive Services サブスクリプション</li>\n<li>ハンズオンファイル一式</li>\n</ul>\n</li>\n<li>Web アプリの実装\n\n<ul>\n<li>ハンズオンファイルの確認</li>\n<li>表示ページの作成</li>\n<li>Emotion API を 呼び出すロジックの作成</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"cognitive-services-利用に必要な環境サブスクリプションの準備\" class=\"fragment\"></span><a href=\"#cognitive-services-%E5%88%A9%E7%94%A8%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>Cognitive Services 利用に必要な環境、サブスクリプションの準備</h1>\n\n<h2>\n<span id=\"開発環境\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>開発環境</h2>\n\n<p>今回は <a href=\"http://www.visualstudio.com/products/code-vs\" rel=\"nofollow\" target=\"_blank\">Visual Studio Code</a> を使用します。もちろんご自分の コーディングツールや Web 開発環境でも大丈夫です。</p>\n\n<blockquote>\n<p>インストール方法は <a href=\"http://qiita.com/annie/items/cd24a22eae7f07536dd1\" id=\"reference-e935019427f96c6c1093\">Visual Studio Code のインストール方法</a> をご覧ください。</p>\n</blockquote>\n\n<h2>\n<span id=\"microsoft-アカウント\" class=\"fragment\"></span><a href=\"#microsoft-%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>Microsoft アカウント</h2>\n\n<p>次のステップで行うサブスクリプションの申し込みに必要ですので、持っていない場合は取得しておきます。</p>\n\n<blockquote>\n<p><a href=\"https://www.microsoft.com/ja-jp/msaccount/signup/default.aspx\" rel=\"nofollow\" target=\"_blank\">Microsoft アカウント登録手続き</a></p>\n</blockquote>\n\n<h2>\n<span id=\"cognitive-services-サブスクリプション\" class=\"fragment\"></span><a href=\"#cognitive-services-%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>Cognitive Services サブスクリプション</h2>\n\n<p>試用は無料ですが、こちらの手順でサブスクリプション申し込みが必要です。</p>\n\n<blockquote>\n<p>申し込み方法は <a href=\"http://qiita.com/annie/items/ba6392b7d1a7647adc4b\" id=\"reference-ae9845d45334675975cd\">Microsoft Cognitive Services サブスクリプション申し込み編</a> をご覧ください。</p>\n</blockquote>\n\n<h2>\n<span id=\"ハンズオンファイル一式\" class=\"fragment\"></span><a href=\"#%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%B8%80%E5%BC%8F\"><i class=\"fa fa-link\"></i></a>ハンズオンファイル一式</h2>\n\n<p>今回作成する Web アプリ は下記のようなシンプルな構成になっています。</p>\n\n<ul>\n<li>index.html</li>\n<li>css\n\n<ul>\n<li>site.css</li>\n</ul>\n</li>\n<li>scripts\n\n<ul>\n<li>script.js</li>\n<li>jquery-3.1.0.min.js</li>\n</ul>\n</li>\n<li>image\n\n<ul>\n<li>Rectangle.png //認識された顔の位置を表示するための正方形(透過png)</li>\n</ul>\n</li>\n</ul>\n\n<p><a href=\"https://emotionwebsto.blob.core.windows.net/handson/EmotionWeb.zip\" rel=\"nofollow\" target=\"_blank\">一式ダウンロード(zipファイル)</a> からダウンロードして、ZIPを展開してローカルの適当な位置に配置します。<br>\n展開した後、念のため読み取り専用属性を外しておきます。WindowsOS ではフォルダーを右クリックして <em>プロパティ</em> を表示して、<em>読み取り専用</em> のチェックボックスを外して <em>OK</em> をクリックします。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_021.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_021.png\" alt=\"\"></a></p>\n\n<h1>\n<span id=\"web-アプリの実装\" class=\"fragment\"></span><a href=\"#web-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>Web アプリの実装</h1>\n\n<p>以下、アプリの実装部分を記述していきます。</p>\n\n<h2>\n<span id=\"ハンズオンファイルの確認\" class=\"fragment\"></span><a href=\"#%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>ハンズオンファイルの確認</h2>\n\n<p>Visual Studio Code を起動し、上部ツールバーの <em>[ファイル]</em> → <em>[フォルダーを開く]</em> をクリックします。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_03.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_03.png\" alt=\"\"></a></p>\n\n<p>ダウンロードして準備した <em>EmotionWeb</em> フォルダーまで移動して選択し、<em>[フォルダーの選択]</em> をクリックして確定します。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_04.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_04.png\" alt=\"\"></a></p>\n\n<p><em>EmotionWeb</em> フォルダーの内容が表示されるのを確認してください。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_05.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_05.png\" alt=\"\"></a></p>\n\n<p>これらのファイルをベースにコードを記述していきます。</p>\n\n<h2>\n<span id=\"表示ページの作成-indexhtml-sitecss\" class=\"fragment\"></span><a href=\"#%E8%A1%A8%E7%A4%BA%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E4%BD%9C%E6%88%90-indexhtml-sitecss\"><i class=\"fa fa-link\"></i></a>表示ページの作成 (index.html, site.css)</h2>\n\n<h3>\n<span id=\"indexhtml-の編集\" class=\"fragment\"></span><a href=\"#indexhtml-%E3%81%AE%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>index.html の編集</h3>\n\n<p><em>index.html</em> をクリックしてエディター画面に表示します。<br>\nhead 部分には CSS および JavaScript ファイルが挿入されています。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"Content-Type\"</span> <span class=\"na\">content=</span><span class=\"s\">\"text/html; charset=utf-8\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Emotion API Sample<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"css/site.css\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"scripts/jquery-3.1.0.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"scripts/script.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n</pre></div>\n</div>\n\n<p>body 本体に画像URLを入力する TextBox と、画像および分析結果を表示する部分を、以下の通り記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n        <span class=\"nt\">&lt;h1&gt;</span>Microsoft Cognitive Services<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;h2&gt;</span>Emotion API Sample<span class=\"nt\">&lt;/h2&gt;</span>\n        <span class=\"c\">&lt;!--画像のURLを入力--&gt;</span>\n        <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"url\"</span> <span class=\"na\">id=</span><span class=\"s\">\"imageUrlTextbox\"</span> <span class=\"na\">class=</span><span class=\"s\">\"urlinput\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"nt\">&lt;table&gt;</span>\n        <span class=\"nt\">&lt;tr&gt;</span>\n            <span class=\"nt\">&lt;td</span> <span class=\"na\">class=</span><span class=\"s\">\"OutputTh\"</span><span class=\"nt\">&gt;</span>\n                <span class=\"c\">&lt;!--出力結果--&gt;</span>\n                <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"OutputDiv\"</span><span class=\"nt\">&gt;</span>Output<span class=\"nt\">&lt;/div&gt;</span>\n            <span class=\"nt\">&lt;/td&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>\n                <span class=\"c\">&lt;!--出力画像--&gt;</span>            \n                <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"PhotoDiv\"</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;img</span> <span class=\"na\">id=</span><span class=\"s\">\"ImageToAnalyze\"</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"image/Rectangle.png\"</span> <span class=\"na\">id=</span><span class=\"s\">\"Rectangle\"</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;/div&gt;</span>\n            <span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;/table&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</pre></div>\n</div>\n\n<p>上部ツールバーの [<em>ファイル</em>]→[<em>保存</em>] をクリック (または <em>Ctrl+S</em>) して <em>index.html</em> を保存します。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_06.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_06.png\" alt=\"\"></a></p>\n\n<h3>\n<span id=\"sitecss-の編集\" class=\"fragment\"></span><a href=\"#sitecss-%E3%81%AE%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>site.css の編集</h3>\n\n<p><em>site.css</em> をクリックしてエディター画面に表示します。<br>\nbody 部分に font-family が指定されています。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">site.css</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">font-family</span><span class=\"o\">:</span> <span class=\"s2\">\"Yu Gothic\"</span><span class=\"p\">;</span> <span class=\"c\">/* 環境に合わせてお好みのフォントを使用してください */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>画面表示に必要なサイズ、フォーマットを以下のように記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">site.css</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c\">/* URL TextBox のサイズ指定 */</span>\n<span class=\"nc\">.urlinput</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"m\">600px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c\">/* 分析結果の表示テーブルのフォーマット指定 */</span>\n<span class=\"nt\">td</span><span class=\"nc\">.OutputTh</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">text-align</span><span class=\"o\">:</span> <span class=\"k\">left</span><span class=\"p\">;</span>\n    <span class=\"k\">vertical-align</span><span class=\"o\">:</span> <span class=\"k\">top</span><span class=\"p\">;</span>\n    <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"m\">300px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 画像の表示フォーマット指定 */</span>\n<span class=\"nf\">#PhotoDiv</span><span class=\"p\">{</span>\n  <span class=\"k\">position</span><span class=\"o\">:</span> <span class=\"k\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 顔認識 (正方形) のフォーマット指定 */</span>\n<span class=\"nf\">#Rectangle</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">opacity</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">z-index</span><span class=\"o\">:</span> <span class=\"m\">10</span><span class=\"p\">;</span>\n    <span class=\"k\">position</span><span class=\"o\">:</span> <span class=\"k\">absolute</span><span class=\"p\">;</span>\n    <span class=\"k\">display</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><em>site.css</em> を保存します。</p>\n\n<h3>\n<span id=\"画面の確認\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E9%9D%A2%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>画面の確認</h3>\n\n<p>ここで index.html をブラウザーで開きます。<br>\nタイトルや URL 入力部分などが表示されるのを確認してください。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_07.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_07.png\" alt=\"\"></a></p>\n\n<h2>\n<span id=\"emotion-api-を-呼び出すロジックの作成-scriptjs\" class=\"fragment\"></span><a href=\"#emotion-api-%E3%82%92-%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%81%AE%E4%BD%9C%E6%88%90-scriptjs\"><i class=\"fa fa-link\"></i></a>Emotion API を 呼び出すロジックの作成 (script.js)</h2>\n\n<p><em>script.js</em> をクリックしてエディター画面に表示します。<br>\nfunction() の中に画像を表示する showImage() と 画像を分析する getFaceInfo() が記述されています。ここからそれらのロジックを記述していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>  <span class=\"c1\">// 画像を分析</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"画像を画面に表示する-showimage\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%82%92%E7%94%BB%E9%9D%A2%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B-showimage\"><i class=\"fa fa-link\"></i></a>画像を画面に表示する (showImage)</h3>\n\n<p>textBox に入力された文字列を imageUrl で取得して画面に表示するロジックを、function() 内部に以下のように記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">showImage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">imageUrl</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#imageUrlTextbox\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">imageUrl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#ImageToAnalyze\"</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">\"src\"</span><span class=\"p\">,</span> <span class=\"nx\">imageUrl</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>  <span class=\"c1\">// 画像を分析</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"画像を分析する-getfaceinfo\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%82%92%E5%88%86%E6%9E%90%E3%81%99%E3%82%8B-getfaceinfo\"><i class=\"fa fa-link\"></i></a>画像を分析する (getFaceInfo)</h3>\n\n<p><strong>EmotionAPI の呼び出しに必要なパラメーターの取得、初期メッセージのセット</strong><br>\nshowImage の下に、getFaceInfo を追加します。<br>\nEmotion API の サブスクリプションキー、画像URL、Emotion API の呼び出し URL を以下のように記述します。合わせて画面に表示する初期メッセージも記述しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">showImage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"o\">:</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">//画像の分析    </span>\n    <span class=\"kd\">var</span> <span class=\"nx\">getFaceInfo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// Emotion API の Subscription Key をセット</span>\n        <span class=\"c1\">// お持ちの Subscription Key をコピーしてください</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">subscriptionKey</span> <span class=\"o\">=</span> <span class=\"s2\">\"YOUR_SUBSCRIPTION_KEY\"</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 画像 URL をセット</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">imageUrl</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#imageUrlTextbox\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">();</span>\n\n        <span class=\"c1\">// Emotion API 呼び出し URL をセット</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">webSvcUrl</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://api.projectoxford.ai/emotion/v1.0/recognize\"</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 画面に表示するメッセージをセット</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">outputDiv</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#OutputDiv\"</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'imageUrlTextbox'</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"o\">==</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// 初期設定</span>\n            <span class=\"nx\">outputDiv</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">\"画像のURLを入力してください\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span><span class=\"p\">{</span>\n            <span class=\"c1\">// 画像分析中</span>\n            <span class=\"nx\">outputDiv</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">\"分析中...\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Emotion API を呼び出すためのパラメーターをセットして呼び出し</span>\n        <span class=\"c1\">// **次の項目で作成します**</span>\n\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>  <span class=\"c1\">// 画像を分析</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p><strong>Emotion APIを呼び出して画像分析結果を取得</strong><br>\nEmotion API を呼び出すパラメーターをセットして呼び出すロジックを下記のように記述します。</p>\n\n<blockquote>\n<p>分析結果を取得できたかどうかは data.length を調べて判定します。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"o\">:</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">getFaceInfo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n<span class=\"o\">:</span>\n        <span class=\"c1\">// Emotion API を呼び出すためのパラメーターをセットして呼び出し</span>\n        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n            <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span>\n            <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">webSvcUrl</span><span class=\"p\">,</span>\n            <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s2\">\"Ocp-Apim-Subscription-Key\"</span><span class=\"o\">:</span> <span class=\"nx\">subscriptionKey</span> <span class=\"p\">},</span>\n            <span class=\"nx\">contentType</span><span class=\"o\">:</span> <span class=\"s2\">\"application/json\"</span><span class=\"p\">,</span>\n            <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"s1\">'{ \"Url\": \"'</span> <span class=\"o\">+</span> <span class=\"nx\">imageUrl</span> <span class=\"o\">+</span> <span class=\"s1\">'\" }'</span>\n        <span class=\"p\">}).</span><span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\n            <span class=\"c1\">// データが取得出来た場合</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 検出された顔の表示位置を取得</span>\n                <span class=\"c1\">// 画面に描画</span>\n                <span class=\"c1\">// 検出された表情スコアを取得</span>\n                <span class=\"c1\">// 表情スコアを表示</span>\n                <span class=\"c1\">// **次の項目で作成します**</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// データが取得できなかった場合</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">outputDiv</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">\"検出できませんでした\"</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"c1\">// エラー処理</span>\n        <span class=\"p\">}).</span><span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'imageUrlTextbox'</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"o\">!=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#OutputDiv\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">\"ERROR!\"</span> <span class=\"o\">+</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>   \n        <span class=\"p\">});</span>\n\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p><strong>画像分析結果を加工して表示</strong><br>\n取得した画像分析データ (顔の表示位置、表情スコア) を加工して表示するロジックを下記のように記述します。</p>\n\n<blockquote>\n<p>画像に 正方形の画像 (image/Rectangle.png) を #Rectangle で重ね合わせて表示し、顔の表示位置を表します。表情スコアは小数点6位までを残して OutputText にセットし、outputDiv で表記します。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"o\">:</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">getFaceInfo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n<span class=\"o\">:</span>\n        <span class=\"c1\">// Emotion API を呼び出すためのパラメーターをセットして呼び出し</span>\n        <span class=\"o\">:</span>\n\n            <span class=\"c1\">// データが取得出来た場合</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 検出された顔の表示位置を取得</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceRectange</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">faceRectangle</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceWidth</span> <span class=\"o\">=</span> <span class=\"nx\">faceRectange</span><span class=\"p\">.</span><span class=\"nx\">width</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceHeight</span> <span class=\"o\">=</span> <span class=\"nx\">faceRectange</span><span class=\"p\">.</span><span class=\"nx\">height</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceLeft</span> <span class=\"o\">=</span> <span class=\"nx\">faceRectange</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceTop</span> <span class=\"o\">=</span> <span class=\"nx\">faceRectange</span><span class=\"p\">.</span><span class=\"nx\">top</span><span class=\"p\">;</span>\n\n                <span class=\"c1\">// 画面に描画</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"top\"</span><span class=\"p\">,</span> <span class=\"nx\">faceTop</span><span class=\"p\">);</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"left\"</span><span class=\"p\">,</span> <span class=\"nx\">faceLeft</span><span class=\"p\">);</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"height\"</span><span class=\"p\">,</span> <span class=\"nx\">faceHeight</span><span class=\"p\">);</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"width\"</span><span class=\"p\">,</span> <span class=\"nx\">faceHeight</span><span class=\"p\">);</span>\n                <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"display\"</span><span class=\"p\">,</span> <span class=\"s2\">\"block\"</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">//小数点6位までを残す関数 (表情スコアの丸めに利用)</span>\n                <span class=\"kd\">function</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span> <span class=\"nx\">number</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"p\">(</span> <span class=\"nx\">number</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span> <span class=\"mi\">10</span> <span class=\"p\">,</span> <span class=\"mi\">6</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span> <span class=\"mi\">10</span> <span class=\"p\">,</span> <span class=\"mi\">6</span> <span class=\"p\">)</span> <span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"c1\">// 検出された表情スコアを取得</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceScore</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">scores</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceAnger</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">anger</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceContempt</span> <span class=\"o\">=</span>  <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">contempt</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceDisgust</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">disgust</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceFear</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">fear</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceHappiness</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">happiness</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceNeutral</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">neutral</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceSadness</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">sadness</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">faceSurprise</span> <span class=\"o\">=</span> <span class=\"nx\">floatFormat</span><span class=\"p\">(</span><span class=\"nx\">faceScore</span><span class=\"p\">.</span><span class=\"nx\">surprise</span><span class=\"p\">);</span>                \n\n                <span class=\"c1\">// 表情スコアを表示</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">outputText</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"&lt;h3&gt;\"</span> <span class=\"o\">+</span> <span class=\"s2\">\"結果:\"</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;/h3&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"怒り　　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceAnger</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"軽蔑　　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceContempt</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"ムカつき: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceDisgust</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"恐れ　　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceFear</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"喜び　　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceHappiness</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"無表情　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceNeutral</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"悲しみ　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceSadness</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n                <span class=\"nx\">outputText</span> <span class=\"o\">+=</span> <span class=\"s2\">\"驚き　　: \"</span> <span class=\"o\">+</span> <span class=\"nx\">faceSurprise</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\n\n                <span class=\"nx\">outputDiv</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"nx\">outputText</span><span class=\"p\">);</span>\n\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// データが取得できなかった場合</span>\n            <span class=\"o\">:</span>\n\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p><strong>URL変更時の動作 (再度分析＆表示)</strong><br>\ntextBox が変更されたときに再度分析&amp;表示するロジックを下記のように記述します。</p>\n\n<blockquote>\n<p>顔の位置を示す正方形 (#Rectangle) を一旦消去します。(hideMakers)</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">script.js</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 画像を画面に表示</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">showImage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"o\">:</span>\n    <span class=\"p\">};</span>\n    <span class=\"c1\">// 画像の分析</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">getFaceInfo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"o\">:</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// 表示するものがない場合</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">hideMarkers</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#Rectangle\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"display\"</span><span class=\"p\">,</span> <span class=\"s2\">\"none\"</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// URL が変更された場合（再度分析＆表示)</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#imageUrlTextbox\"</span><span class=\"p\">).</span><span class=\"nx\">change</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">hideMarkers</span><span class=\"p\">();</span>\n        <span class=\"nx\">showImage</span><span class=\"p\">();</span>\n        <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">showImage</span><span class=\"p\">();</span>\n    <span class=\"nx\">getFaceInfo</span><span class=\"p\">();</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p><em>script.js</em> を忘れずに保存します。</p>\n\n<h1>\n<span id=\"アプリケーションの動作確認\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>アプリケーションの動作確認</h1>\n\n<p>index.html をブラウザーで開きます。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_08.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_08.png\" alt=\"\"></a></p>\n\n<p>オンライン画像の URL (例えばこちら↓) をコピーして、テキストボックスにペーストします。<br>\n<a href=\"https://emotionwebsto.blob.core.windows.net/handson/emotionweb_happiness.jpg\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://emotionwebsto.blob.core.windows.net/handson/emotionweb_happiness.jpg</a></p>\n\n<p>画像と分析結果が表示されれば、アプリケーションは完成です。<br>\n<a href=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://msdnshared.blob.core.windows.net/media/2016/09/bluesky_20160908_011.png\" alt=\"表情分析アプリ(JS)完成形\"></a></p>\n\n<h1>\n<span id=\"appendix\" class=\"fragment\"></span><a href=\"#appendix\"><i class=\"fa fa-link\"></i></a>Appendix</h1>\n\n<p>同じソースを Web 公開しました。動作確認にご利用ください。<br>\n<a href=\"http://emotionwebsample.azurewebsites.net/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://emotionwebsample.azurewebsites.net/</a><br>\nまた、完成形のソースコードを GitHub にて公開しました。<br>\n<a href=\"https://github.com/a-n-n-i-e/CognitiveEmotionAPI-EmotionWeb-JS\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://github.com/a-n-n-i-e/CognitiveEmotionAPI-EmotionWeb-JS</a></p>\n",
    "stock_users": [
        "Noboruhi",
        "wukann",
        "hmcGit"
    ]
}, {
    "id": 421238,
    "uuid": "92a7de771bbea99dbc7c",
    "user": {
        "id": 35595,
        "url_name": "howdy39",
        "profile_image_url": "https://pbs.twimg.com/profile_images/3654130985/0812a2d7fce1f6aae86e72a234e60580_normal.jpeg",
        "following": false
    },
    "title": "cssnextから学ぶ次世代CSS",
    "created_at": "2016-09-08 05:36:49 +0900",
    "updated_at": "2016-09-08 12:31:22 +0900",
    "created_at_in_words": "約10時間",
    "updated_at_in_words": "約3時間",
    "tags": [{
        "name": "HTML",
        "url_name": "html",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9068c4ec90f73848c4c0cfeb25eb082d20484587/medium.jpg?1465035225",
        "following": false,
        "versions": []
    }, {
        "name": "CSS",
        "url_name": "css",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/b4438ce0a78810256791a266e87c74a76b555de1/medium.jpg?1419699326",
        "following": true,
        "versions": []
    }, {
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "postcss",
        "url_name": "postcss",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0199fbc9790ef98445e4c41b40d457fde309298e/medium.jpg?1450425541",
        "following": false,
        "versions": []
    }, {
        "name": "cssnext",
        "url_name": "cssnext",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e7975825ee79700d917903c2b73ea478be0c3c0e/medium.jpg?1473132936",
        "following": false,
        "versions": []
    }],
    "stock_count": 28,
    "comment_count": 2,
    "url": "http://qiita.com/howdy39/items/92a7de771bbea99dbc7c",
    "created_at_as_seconds": 1473280609,
    "tweet": true,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "\n![Kobito.VVEsP2.png](https://qiita-image-store.s3.amazonaws.com/0/35595/4d76a40a-7223-bafb-fb95-2d0b20e22788.png \"Kobito.VVEsP2.png\")\n\n\ncssnextとは策定中のCSS仕様を先立って使えるようにするツールのことです。\nひとことで言うとCSS版Babelです。\n\nCSSを変換する仕組みはPostCSSのプラグインとして有志によって作成されています。\ncssnextはそのプラグインをまとめたプラグインパックと呼ばれるものです。\n※古いブラウザに対応させるためのフォールバック機能を提供するプラグインも含んでいます。\n\n**本記事は策定中のCSSの知識をつけることが目的です**:smile: \n\n\n## 参考リンクなど\ncssnext（PostCSS）の背景や使い方は先日記事を書いたので是非見てみてください\n[Step by Stepで始めるCSSモダン化（PostCSS）](http://qiita.com/howdy39/items/1029e3df24ac42c7bd49)\n\n[playground](http://cssnext.io/playground/)でcssnextが実際にどのように変換するのかを試せます。\n\n## 機能一覧\n本記事で紹介する機能一覧を出すのに使ったcssnextのページです。\n[postcss-cssnext features](http://cssnext.io/features/)\n\n\n|機能|プラグイン|仕様|Caniuse|\n|---|---|---|---|\n|automatic vendor prefixes|[autoprefixer](https://github.com/postcss/autoprefixer)|||\n|custom properties & `var()`|[postcss-custom-properties](https://github.com/postcss/postcss-custom-properties)|http://www.w3.org/TR/css-variables/|[CSS Variables (Custom Properties)](http://caniuse.com/#feat=css-variables)|\n|custom properties set & `@apply`|[postcss-apply](https://github.com/pascalduez/postcss-apply)|https://tabatkins.github.io/specs/css-apply-rule|\n|reduced `calc()`|[reduce-css-calc](https://github.com/MoOx/reduce-css-calc)|https://github.com/MoOx/reduce-css-calc#readme|[calc() as CSS unit value](http://caniuse.com/#feat=calc)|\n|custom media queries|[postcss-custom-media](https://github.com/postcss/postcss-custom-media)|http://dev.w3.org/csswg/mediaqueries/#custom-mq|\n|media queries ranges|[postcss-media-minmax](https://github.com/postcss/postcss-media-minmax)|http://dev.w3.org/csswg/mediaqueries/#mq-ranges|\n|custom selectors|[postcss-custom-selectors](https://github.com/postcss/postcss-custom-selectors)|http://dev.w3.org/csswg/css-extensions/#custom-selectors|\n|nesting|[postcss-nesting](https://github.com/jonathantneal/postcss-nesting)|http://tabatkins.github.io/specs/css-nesting/|\n|`color()` function|[postcss-color-function](https://github.com/postcss/postcss-color-function)|http://dev.w3.org/csswg/css-color/#modifying-colors|\n|`hwb()` function|[postcss-color-hwb](https://github.com/postcss/postcss-color-hwb)|http://dev.w3.org/csswg/css-color/#the-hwb-notation|\n|`gray()` function|[postcss-color-gray](https://github.com/postcss/postcss-color-gray)|http://dev.w3.org/csswg/css-color/#grays|\n|`#rrggbbaa` colors|[postcss-color-hex-alpha](https://github.com/postcss/postcss-color-hex-alpha)|http://dev.w3.org/csswg/css-color/#hex-notation|\n|`rgba` function (`rgb` fallback)|[postcss-color-rgba-fallback](https://github.com/postcss/postcss-color-rgba-fallback)|http://www.w3.org/TR/css3-color/|[CSS3 Colors](http://caniuse.com/#feat=css3-colors)|\n|`rebeccapurple` color|[postcss-color-rebeccapurple](https://github.com/postcss/postcss-color-rebeccapurple)|http://dev.w3.org/csswg/css-color/#valdef-color-rebeccapurple|\n|`font-variant` property|[postcss-font-variant](https://github.com/postcss/postcss-font-variant)|http://dev.w3.org/csswg/css-fonts/#propdef-font-variant|[CSS font-variant-alternates](http://caniuse.com/#feat=font-variant-alternates)|\n|`filter` property|[pleeease-filters](https://github.com/iamvdo/pleeease-filters)|http://www.w3.org/TR/filter-effects/|[CSS Filter Effects](http://caniuse.com/#feat=css-filters)|\n|`initial` value|[postcss-initial](https://github.com/maximkoretskiy/postcss-initial)|http://www.w3.org/TR/css3-values/#common-keywords|[CSS initial value](http://caniuse.com/#feat=css-initial-value)|\n|`rem` unit (`px` fallback)|[node-pixrem](https://github.com/robwierzbowski/node-pixrem)|http://www.w3.org/TR/css3-values/#rem-unit|[rem (root em) units](http://caniuse.com/#feat=rem)|\n|`:any-link` pseudo-class|[postcss-pseudo-class-any-link](https://github.com/jonathantneal/postcss-pseudo-class-any-link)|http://dev.w3.org/csswg/selectors/#any-link-pseudo|\n|`:matches` pseudo-class|[postcss-selector-matches](https://github.com/postcss/postcss-selector-matches)|http://dev.w3.org/csswg/selectors-4/#matches|[matches() DOM method](http://caniuse.com/#feat=matchesselector)|\n|`:not` pseudo-class|[postcss-selector-not](https://github.com/postcss/postcss-selector-NOT)|http://dev.w3.org/csswg/selectors-4/#negation|[selector list argument of :not()](http://caniuse.com/#feat=css-not-sel-list)|\n|`::` pseudo syntax (`:` fallback)|[postcss-pseudoelements](https://github.com/axa-ch/postcss-pseudoelements)|http://www.w3.org/TR/css3-selectors/#pseudo-elements|[::selection CSS pseudo-element](http://caniuse.com/#feat=css-selection)|\n|`overflow-wrap` property (`word-wrap` fallback)|[postcss-replace-overflow-wrap](https://github.com/MattDiMu/postcss-replace-overflow-wrap)|https://drafts.csswg.org/css-text-3/#propdef-word-wrap|[CSS3 Overflow-wrap](http://caniuse.com/#feat=wordwrap)|\n|attribute case insensitive|[postcss-attribute-case-insensitive](https://github.com/Semigradsky/postcss-attribute-case-insensitive)|https://www.w3.org/TR/selectors4/#attribute-case|[Case-insensitive CSS attribute selectors](http://caniuse.com/#feat=css-case-insensitive)|\n\n※2016/09/07時点の機能一覧です。今後増減があると思います。\n※`Can i use`が空なのは見つけれなかった。\n\n　　　　　　　　　　　　\n## automatic vendor prefixes\nベンダープレフィックスを自動でつけてくれる機能です。\n\n```css:before\ndiv {\n  display:flex;\n}\n```\n\n```css:after\ndiv {\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n}\n```\n\n\n## custom properties & `var()`\nCSSに変数を導入します。\n\n`:root{}`で定義して、`var()`で使います。\n\n```css:before\n:root {\n  --myColor: red;\n}\n\ndiv {\n  background-color: var(--myColor)\n}\n```\n\n```css:after\ndiv {\n  background-color: red\n}\n```\n\n\n## custom properties set & `@apply`\nプロパティごと定義を共通化するものです。\n\n`:root{}`で定義して、`@apply`で使います。\n\n```css:before\n:root {\n  --myBackGroundColor: {\n    background-color: red\n  }\n}\n\ndiv {\n  @apply --myBackGroundColor\n}\n```\n\n```css:after\ndiv {\n  background-color: red}\n```\n\n\n## reduced `calc()`\n数値計算を行います。\n\n`calc()`の中に式を書きます。\n式に単位が付いていてもOKです。\n\nreduced。。。？一般的な「減らす」の意味じゃないですよね。\n> 「整理して簡単な形に変える、まとめる」というしっくり来る説明を[@nyoro_712](http://qiita.com/nyoro_712)さんから貰いました。ありがとうございます。\n\n```css:before\ndiv {\n  width: calc(10px + 20);\n  min-width: calc(10 * 2px);\n  height: calc(100px / 2);\n  min-height: calc(10 + 20)px;\n}\n```\n\n```css:after\ndiv {\n  width: 30px;\n  min-width: 20px;\n  height: 50px;\n  min-height: 30px;\n}\n```\n\n\n## custom media queries\nメディアクエリの定義に名前をつけることができます。\n\n`@custom-media --変数名 〜`で定義して`@media (--変数名)`で使用します。\n\niPadとかデバイス名指定できるの嬉しいですね。\n\n```css:before\n@custom-media --iPad only screen (min-device-width: 768px) and (max-device-width: 1024px);\n\n@media (--iPad) {\n  /** css for ipad */\n}\n\n```\n\n```css:after\n@media only screen (min-device-width: 768px) and (max-device-width: 1024px) {\n  /** css for ipad */\n}\n```\n\n\n## media queries ranges\n不等号を使ってメディアクエリを定義できます。\n\nmin, maxに変換してくれます。地味に嬉しい機能。\n\n```css:before\n@media (width >= 500px) and (width < 1201px) {\n  /* your styles */\n}\n```\n\n```css:after\n@media (min-width: 500px) and (max-width: 1200px) {\n  /* your styles */\n}\n```\n\n\n\n## custom selectors\nセレクタを定義することができます。\n\n`@custom-selector :--変数名`で定義しておいて`:--変数名`で仕様\nつなげる事もできます。\n大量のセレクタが作れますね。\n\n```css:before\n@custom-selector :--header h1, h2, h3, h4;\n@custom-selector :--hover :hover;\n@custom-selector :--hoge .hoge, .piyo, .fuga;\n\n:--header:--hover:--hoge {\n  /* styles */\n}\n```\n\n```css:after\nh1:hover.hoge,\nh2:hover.hoge,\nh3:hover.hoge,\nh4:hover.hoge,\nh1:hover.piyo,\nh2:hover.piyo,\nh3:hover.piyo,\nh4:hover.piyo,\nh1:hover.fuga,\nh2:hover.fuga,\nh3:hover.fuga,\nh4:hover.fuga {\n  /* styles */\n}\n```\n\n\n## nesting\nSassでもおなじみのネスト記法が使えます。\n\n```css:before\na {\n  color:red;\n\n  & span {\n    color: white;\n  }\n}\n```\n\n```css:after\na {\n  color:red\n}\na span {\n  color:white\n}\n```\n\n\n## `color()` function\ncolor()関数で色を指定できます。\n\n```css:before\na {\n  color: color(red blackness(50%));\n}\na:hover {\n  color: color(red blackness(50%) whiteness(25%));\n}\n```\n\n```css:after\na {\n  color: rgb(128, 0, 0);\n}\na:hover {\n  color: rgb(128, 64, 64);\n}\n```\n\n\n## `hwb()` function\nHWB形式で色指定が可能です。\n\n```css:before\nbody {\n  color: hwb(90, 0%, 0%, 0.5);\n}\n```\n\n```css:after\nbody {\n  color: rgba(128, 255, 0, 0.5);\n}\n```\n\nHSLと似ているので比較\n\n### HSL\nHSLは色相・彩度・明度（Hue, Saturation, Lightness）\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/35595/7ce9a91e-65e4-ed59-a995-3184cb515fb6.png\" width=\"150px\"></img>\n\n### HWB\nHWBは色相・白味・黒味（Hue, Whiteness, Blackness）\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/35595/d34f721b-32ee-c0f7-a0d1-d35c73b0e99e.png\" width=\"150px\"></img>\n\nHWBのが直感的にイメージしやすいと思います。\n\n\n## `gray()` function\n灰色をあらわすための関数が追加。\nrgb(),rgba()に変換します。\n\n\n```css:before\n.foo {\n  color: gray(85);\n}\n\n.bar {\n  color: gray(10%, 50%);\n}\n```\n\n```css:after\n.foo {\n  color: rgb(85, 85, 85);\n}\n\n.bar {\n  color: rgba(26, 26, 26, 0.5);\n}\n```\n\n\n## `#rrggbbaa` colors\n透明度が追加され、#rrggbbaaの形式で定義できます。\n\n`#rgba`でもOK。\n\n```css:before\nbody {\n  background: #9d9c;\n  color: #001020ff;\n}\n```\n\n```css:after\nbody {\n  background: rgba(153, 221, 153, 0.8);\n  color: rgba(0, 16, 32, 1);\n}\n```\n\n\n## `rgba` function (`rgb` fallback)\nrgba()に対応していないIE8のために#rgbに変換します。\n\nこれはplaygroundでは有効になっていないみたいです。\n[rgbaに対応してないのはもうIE8のみ](http://caniuse.com/#feat=css3-colors)みたいなので外したのかも。\n\n\n```css:before\nbody {\n  background: rgba(153, 221, 153, 0.8);\n  border: solid 1px rgba(100,102,103,.3);\n}\n```\n\n```css:after\nbody {\n  background: #99dd99;\n  background: rgba(153, 221, 153, 0.8);\n  border: solid 1px #646667;\n  border: solid 1px rgba(100,102,103,.3);\n}\n```\n\n\n## `rebeccapurple` color\nレベッカパープルという紫色をあらわす指定が追加されます。\n[rebeccapurpleがCSS 4 colorに提案された経緯](https://cpplover.blogspot.jp/2014/06/rebeccapurplecss-4-color.html)に経緯がまとまっているので見てみてください:cry: \n\n\n```css:before\nbody {\n  color: rebeccapurple;\n}\n```\n\n```css:after\nbody {\n  color: rgb(102, 51, 153);\n}\n```\n\n\n\n## `font-variant` property\n`font-variant-xxx`を`font-feature-settings`の形に変換するらしい。\n`font-variant`はなくなるってことなのかな。ちょっとだけ調べてみましたが良くわからなかった。。\n\n\n```css:before\nh2 {\n  font-variant-caps: small-caps;\n}\n\ntable {\n  font-variant-numeric: lining-nums;\n}\n```\n\n```css:after\nh2 {\n  -webkit-font-feature-settings: \"c2sc\";\n          font-feature-settings: \"c2sc\";\n  font-variant-caps: small-caps;\n}\n\ntable {\n  -webkit-font-feature-settings: \"lnum\";\n          font-feature-settings: \"lnum\";\n  font-variant-numeric: lining-nums;\n}\n```\n\n\n\n## `filter` property\nfilterに対応していないFirefox35未満でfilterを使えるようにする機能です。\n\nオプションで`oldIE:true`を指定すると古いIEでも使えそうな記述あり。\n\nフィルタ自体は以下記事を参照\n[CSSフィルタことはじめ](http://qiita.com/bluebird/items/a3f55206984fa8105e39)\n\n```css:before\n.blur {\n    filter:sepia(100%);\n}\n```\n\n```css:after\n.blur {\n    filter:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.393 0.769 0.189 0 0 0.349 0.686 0.168 0 0 0.272 0.534 0.131 0 0 0 0 0 1 0\" /></filter></svg>#filter');\n    -webkit-filter:sepia(100%);\n            filter:sepia(100%);\n}\n```\n\n\n## `initial` value\nスタイルをリセットする事が可能。\n\nこの`all: initial`は目玉機能だそうな。\nどうもCSSに詳しい人には嬉しい機能らしい。\n\n\n\n```css:before\ndiv {\n  all: initial; /* use initial for ALL PROPERTIES in one shot */\n}\n```\n\n```css:after\ndiv {\n  -webkit-animation: none 0s ease 0s 1 normal none running;\n          animation: none 0s ease 0s 1 normal none running;\n  -webkit-backface-visibility: visible;\n          backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  -o-border-image: none;\n     border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  -webkit-columns: auto;\n     -moz-columns: auto;\n          columns: auto;\n  -webkit-column-count: auto;\n     -moz-column-count: auto;\n          column-count: auto;\n  -webkit-column-fill: balance;\n     -moz-column-fill: balance;\n          column-fill: balance;\n  -webkit-column-gap: normal;\n     -moz-column-gap: normal;\n          column-gap: normal;\n  -webkit-column-rule: medium none currentColor;\n     -moz-column-rule: medium none currentColor;\n          column-rule: medium none currentColor;\n  -webkit-column-span: 1;\n     -moz-column-span: 1;\n          column-span: 1;\n  -webkit-column-width: auto;\n     -moz-column-width: auto;\n          column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  -webkit-hyphens: none;\n      -ms-hyphens: none;\n          hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  -webkit-perspective: none;\n          perspective: none;\n  -webkit-perspective-origin: 50% 50%;\n          perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  -moz-tab-size: 8;\n    -o-tab-size: 8;\n       tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  -moz-text-align-last: auto;\n       text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  -webkit-transform: none;\n          transform: none;\n  -webkit-transform-origin: 50% 50% 0;\n          transform-origin: 50% 50% 0;\n  -webkit-transform-style: flat;\n          transform-style: flat;\n  -webkit-transition: none 0s ease 0s;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial; /* use initial for ALL PROPERTIES in one shot */\n}\n```\n\n\n## `rem` unit (`px` fallback)\nremに対応していないIE8のためにpxを追加してくれます。\n\nrem自体は以下記事を参照\n[remってなに？](http://qiita.com/elly/items/da92e63641760a69a3be)\n\n```css:before\nh1 {\n  font-size: 1.5rem;\n}\n```\n\n```css:after\nh1 {\n  font-size: 24px;\n  font-size: 1.5rem;\n}\n```\n\n\n\n## `:any-link` pseudo-class\n`:link`, `:visited`を1つの定義で可能にします。\n\n\n```css:before\nnav :any-link {\n  background-color: yellow;\n}\n```\n\n```css:after\nnav :link,nav :visited {\n  background-color: yellow;\n}\n```\n\n## `:matches` pseudo-class\nセレクタをグルーピングできます。\n\n```css:before\np:matches(:first-child, .special) {\n  color: red;\n}\n```\n\n```css:after\np:first-child, p.special {\n  color: red;\n}\n```\n\n## `:not` pseudo-class\nmatchesの`:not`版です。\n\n```css:before\np:not(:first-child, .special) {\n  color: red;\n}\n```\n\n```css:after\np:not(:first-child):not(.special) {\n  color: red;\n}\n```\n\n## `::` pseudo syntax (`:` fallback)\nIE8のために`::`を`:`に変換します。\n\nIE8はもう死んだんだ。\n\n```css:before\na::before {\n}\n```\n\n```css:after\na:before {\n}\n```\n\n## `overflow-wrap` property (`word-wrap` fallback)\n`overflow-wrap`を`word-wrap`に変換します。\n\n```css:before\nbody {\n  overflow-wrap: break-word;\n}\n```\n\n```css:after\nbody {\n  word-wrap: break-word;\n}\n```\n\n## attribute case insensitive\n大文字小文字を無視する属性セレクタのオプション`i`が追加。\n\n```css:before\n[attr=abc i] {\n  border-style: solid none;\n}\n```\n\n```css:after\n[attr=abc],[attr=Abc],[attr=aBc],[attr=ABc],[attr=abC],[attr=AbC],[attr=aBC],[attr=ABC] {\n  border-style: solid none;\n}\n```\n\n## あとがき\nSassだ、LESSだ、Stylusだ、Compassだ、cssnextだ、とCSS界隈もかなり混沌としている気がします:sweat: \nいつかCSSだけで済む日が来るといいですね:smile: \n\n",
    "body": "<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/35595/4d76a40a-7223-bafb-fb95-2d0b20e22788.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/35595/4d76a40a-7223-bafb-fb95-2d0b20e22788.png\" alt=\"Kobito.VVEsP2.png\" title=\"Kobito.VVEsP2.png\"></a></p>\n\n<p>cssnextとは策定中のCSS仕様を先立って使えるようにするツールのことです。<br>\nひとことで言うとCSS版Babelです。</p>\n\n<p>CSSを変換する仕組みはPostCSSのプラグインとして有志によって作成されています。<br>\ncssnextはそのプラグインをまとめたプラグインパックと呼ばれるものです。<br>\n※古いブラウザに対応させるためのフォールバック機能を提供するプラグインも含んでいます。</p>\n\n<p><strong>本記事は策定中のCSSの知識をつけることが目的です</strong><img class=\"emoji\" title=\":smile:\" alt=\":smile:\" src=\"https://cdn.qiita.com/emoji/unicode/1f604.png\" height=\"20\" width=\"20\" align=\"absmiddle\"> </p>\n\n<h2>\n<span id=\"参考リンクなど\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AA%E3%81%A9\"><i class=\"fa fa-link\"></i></a>参考リンクなど</h2>\n\n<p>cssnext（PostCSS）の背景や使い方は先日記事を書いたので是非見てみてください<br>\n<a href=\"http://qiita.com/howdy39/items/1029e3df24ac42c7bd49\" id=\"reference-19e48ce77582adbb97c9\">Step by Stepで始めるCSSモダン化（PostCSS）</a></p>\n\n<p><a href=\"http://cssnext.io/playground/\" rel=\"nofollow\" target=\"_blank\">playground</a>でcssnextが実際にどのように変換するのかを試せます。</p>\n\n<h2>\n<span id=\"機能一覧\" class=\"fragment\"></span><a href=\"#%E6%A9%9F%E8%83%BD%E4%B8%80%E8%A6%A7\"><i class=\"fa fa-link\"></i></a>機能一覧</h2>\n\n<p>本記事で紹介する機能一覧を出すのに使ったcssnextのページです。<br>\n<a href=\"http://cssnext.io/features/\" rel=\"nofollow\" target=\"_blank\">postcss-cssnext features</a></p>\n\n<table>\n<thead>\n<tr>\n<th>機能</th>\n<th>プラグイン</th>\n<th>仕様</th>\n<th>Caniuse</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>automatic vendor prefixes</td>\n<td><a href=\"https://github.com/postcss/autoprefixer\" rel=\"nofollow\" target=\"_blank\">autoprefixer</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>custom properties &amp; <code>var()</code>\n</td>\n<td><a href=\"https://github.com/postcss/postcss-custom-properties\" rel=\"nofollow\" target=\"_blank\">postcss-custom-properties</a></td>\n<td><a href=\"http://www.w3.org/TR/css-variables/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/css-variables/</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-variables\" rel=\"nofollow\" target=\"_blank\">CSS Variables (Custom Properties)</a></td>\n</tr>\n<tr>\n<td>custom properties set &amp; <code>@apply</code>\n</td>\n<td><a href=\"https://github.com/pascalduez/postcss-apply\" rel=\"nofollow\" target=\"_blank\">postcss-apply</a></td>\n<td><a href=\"https://tabatkins.github.io/specs/css-apply-rule\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://tabatkins.github.io/specs/css-apply-rule</a></td>\n<td></td>\n</tr>\n<tr>\n<td>reduced <code>calc()</code>\n</td>\n<td><a href=\"https://github.com/MoOx/reduce-css-calc\" rel=\"nofollow\" target=\"_blank\">reduce-css-calc</a></td>\n<td><a href=\"https://github.com/MoOx/reduce-css-calc#readme\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://github.com/MoOx/reduce-css-calc#readme</a></td>\n<td><a href=\"http://caniuse.com/#feat=calc\" rel=\"nofollow\" target=\"_blank\">calc() as CSS unit value</a></td>\n</tr>\n<tr>\n<td>custom media queries</td>\n<td><a href=\"https://github.com/postcss/postcss-custom-media\" rel=\"nofollow\" target=\"_blank\">postcss-custom-media</a></td>\n<td><a href=\"http://dev.w3.org/csswg/mediaqueries/#custom-mq\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/mediaqueries/#custom-mq</a></td>\n<td></td>\n</tr>\n<tr>\n<td>media queries ranges</td>\n<td><a href=\"https://github.com/postcss/postcss-media-minmax\" rel=\"nofollow\" target=\"_blank\">postcss-media-minmax</a></td>\n<td><a href=\"http://dev.w3.org/csswg/mediaqueries/#mq-ranges\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/mediaqueries/#mq-ranges</a></td>\n<td></td>\n</tr>\n<tr>\n<td>custom selectors</td>\n<td><a href=\"https://github.com/postcss/postcss-custom-selectors\" rel=\"nofollow\" target=\"_blank\">postcss-custom-selectors</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-extensions/#custom-selectors\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-extensions/#custom-selectors</a></td>\n<td></td>\n</tr>\n<tr>\n<td>nesting</td>\n<td><a href=\"https://github.com/jonathantneal/postcss-nesting\" rel=\"nofollow\" target=\"_blank\">postcss-nesting</a></td>\n<td><a href=\"http://tabatkins.github.io/specs/css-nesting/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://tabatkins.github.io/specs/css-nesting/</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>color()</code> function</td>\n<td><a href=\"https://github.com/postcss/postcss-color-function\" rel=\"nofollow\" target=\"_blank\">postcss-color-function</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-color/#modifying-colors</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>hwb()</code> function</td>\n<td><a href=\"https://github.com/postcss/postcss-color-hwb\" rel=\"nofollow\" target=\"_blank\">postcss-color-hwb</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-color/#the-hwb-notation\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-color/#the-hwb-notation</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>gray()</code> function</td>\n<td><a href=\"https://github.com/postcss/postcss-color-gray\" rel=\"nofollow\" target=\"_blank\">postcss-color-gray</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-color/#grays\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-color/#grays</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>#rrggbbaa</code> colors</td>\n<td><a href=\"https://github.com/postcss/postcss-color-hex-alpha\" rel=\"nofollow\" target=\"_blank\">postcss-color-hex-alpha</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-color/#hex-notation\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-color/#hex-notation</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>rgba</code> function (<code>rgb</code> fallback)</td>\n<td><a href=\"https://github.com/postcss/postcss-color-rgba-fallback\" rel=\"nofollow\" target=\"_blank\">postcss-color-rgba-fallback</a></td>\n<td><a href=\"http://www.w3.org/TR/css3-color/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/css3-color/</a></td>\n<td><a href=\"http://caniuse.com/#feat=css3-colors\" rel=\"nofollow\" target=\"_blank\">CSS3 Colors</a></td>\n</tr>\n<tr>\n<td>\n<code>rebeccapurple</code> color</td>\n<td><a href=\"https://github.com/postcss/postcss-color-rebeccapurple\" rel=\"nofollow\" target=\"_blank\">postcss-color-rebeccapurple</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-color/#valdef-color-rebeccapurple\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-color/#valdef-color-rebeccapurple</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>font-variant</code> property</td>\n<td><a href=\"https://github.com/postcss/postcss-font-variant\" rel=\"nofollow\" target=\"_blank\">postcss-font-variant</a></td>\n<td><a href=\"http://dev.w3.org/csswg/css-fonts/#propdef-font-variant\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/css-fonts/#propdef-font-variant</a></td>\n<td><a href=\"http://caniuse.com/#feat=font-variant-alternates\" rel=\"nofollow\" target=\"_blank\">CSS font-variant-alternates</a></td>\n</tr>\n<tr>\n<td>\n<code>filter</code> property</td>\n<td><a href=\"https://github.com/iamvdo/pleeease-filters\" rel=\"nofollow\" target=\"_blank\">pleeease-filters</a></td>\n<td><a href=\"http://www.w3.org/TR/filter-effects/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/filter-effects/</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-filters\" rel=\"nofollow\" target=\"_blank\">CSS Filter Effects</a></td>\n</tr>\n<tr>\n<td>\n<code>initial</code> value</td>\n<td><a href=\"https://github.com/maximkoretskiy/postcss-initial\" rel=\"nofollow\" target=\"_blank\">postcss-initial</a></td>\n<td><a href=\"http://www.w3.org/TR/css3-values/#common-keywords\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/css3-values/#common-keywords</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-initial-value\" rel=\"nofollow\" target=\"_blank\">CSS initial value</a></td>\n</tr>\n<tr>\n<td>\n<code>rem</code> unit (<code>px</code> fallback)</td>\n<td><a href=\"https://github.com/robwierzbowski/node-pixrem\" rel=\"nofollow\" target=\"_blank\">node-pixrem</a></td>\n<td><a href=\"http://www.w3.org/TR/css3-values/#rem-unit\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/css3-values/#rem-unit</a></td>\n<td><a href=\"http://caniuse.com/#feat=rem\" rel=\"nofollow\" target=\"_blank\">rem (root em) units</a></td>\n</tr>\n<tr>\n<td>\n<code>:any-link</code> pseudo-class</td>\n<td><a href=\"https://github.com/jonathantneal/postcss-pseudo-class-any-link\" rel=\"nofollow\" target=\"_blank\">postcss-pseudo-class-any-link</a></td>\n<td><a href=\"http://dev.w3.org/csswg/selectors/#any-link-pseudo\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/selectors/#any-link-pseudo</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<code>:matches</code> pseudo-class</td>\n<td><a href=\"https://github.com/postcss/postcss-selector-matches\" rel=\"nofollow\" target=\"_blank\">postcss-selector-matches</a></td>\n<td><a href=\"http://dev.w3.org/csswg/selectors-4/#matches\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/selectors-4/#matches</a></td>\n<td><a href=\"http://caniuse.com/#feat=matchesselector\" rel=\"nofollow\" target=\"_blank\">matches() DOM method</a></td>\n</tr>\n<tr>\n<td>\n<code>:not</code> pseudo-class</td>\n<td><a href=\"https://github.com/postcss/postcss-selector-NOT\" rel=\"nofollow\" target=\"_blank\">postcss-selector-not</a></td>\n<td><a href=\"http://dev.w3.org/csswg/selectors-4/#negation\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://dev.w3.org/csswg/selectors-4/#negation</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-not-sel-list\" rel=\"nofollow\" target=\"_blank\">selector list argument of :not()</a></td>\n</tr>\n<tr>\n<td>\n<code>::</code> pseudo syntax (<code>:</code> fallback)</td>\n<td><a href=\"https://github.com/axa-ch/postcss-pseudoelements\" rel=\"nofollow\" target=\"_blank\">postcss-pseudoelements</a></td>\n<td><a href=\"http://www.w3.org/TR/css3-selectors/#pseudo-elements\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.w3.org/TR/css3-selectors/#pseudo-elements</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-selection\" rel=\"nofollow\" target=\"_blank\">::selection CSS pseudo-element</a></td>\n</tr>\n<tr>\n<td>\n<code>overflow-wrap</code> property (<code>word-wrap</code> fallback)</td>\n<td><a href=\"https://github.com/MattDiMu/postcss-replace-overflow-wrap\" rel=\"nofollow\" target=\"_blank\">postcss-replace-overflow-wrap</a></td>\n<td><a href=\"https://drafts.csswg.org/css-text-3/#propdef-word-wrap\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://drafts.csswg.org/css-text-3/#propdef-word-wrap</a></td>\n<td><a href=\"http://caniuse.com/#feat=wordwrap\" rel=\"nofollow\" target=\"_blank\">CSS3 Overflow-wrap</a></td>\n</tr>\n<tr>\n<td>attribute case insensitive</td>\n<td><a href=\"https://github.com/Semigradsky/postcss-attribute-case-insensitive\" rel=\"nofollow\" target=\"_blank\">postcss-attribute-case-insensitive</a></td>\n<td><a href=\"https://www.w3.org/TR/selectors4/#attribute-case\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://www.w3.org/TR/selectors4/#attribute-case</a></td>\n<td><a href=\"http://caniuse.com/#feat=css-case-insensitive\" rel=\"nofollow\" target=\"_blank\">Case-insensitive CSS attribute selectors</a></td>\n</tr>\n</tbody>\n</table>\n\n<p>※2016/09/07時点の機能一覧です。今後増減があると思います。<br>\n※<code>Can i use</code>が空なのは見つけれなかった。</p>\n\n<p>　　　　　　　　　　　　</p>\n\n<h2>\n<span id=\"automatic-vendor-prefixes\" class=\"fragment\"></span><a href=\"#automatic-vendor-prefixes\"><i class=\"fa fa-link\"></i></a>automatic vendor prefixes</h2>\n\n<p>ベンダープレフィックスを自動でつけてくれる機能です。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"o\">:</span><span class=\"n\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"o\">:-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">box</span><span class=\"p\">;</span>\n  <span class=\"k\">display</span><span class=\"o\">:-</span><span class=\"n\">ms</span><span class=\"o\">-</span><span class=\"n\">flexbox</span><span class=\"p\">;</span>\n  <span class=\"k\">display</span><span class=\"o\">:</span><span class=\"n\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"custom-properties--var\" class=\"fragment\"></span><a href=\"#custom-properties--var\"><i class=\"fa fa-link\"></i></a>custom properties &amp; <code>var()</code>\n</h2>\n\n<p>CSSに変数を導入します。</p>\n\n<p><code>:root{}</code>で定義して、<code>var()</code>で使います。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nd\">:root</span> <span class=\"p\">{</span>\n  <span class=\"o\">--</span><span class=\"n\">myColor</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">myColor</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"nb\">red</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"custom-properties-set--apply\" class=\"fragment\"></span><a href=\"#custom-properties-set--apply\"><i class=\"fa fa-link\"></i></a>custom properties set &amp; <code>@apply</code>\n</h2>\n\n<p>プロパティごと定義を共通化するものです。</p>\n\n<p><code>:root{}</code>で定義して、<code>@apply</code>で使います。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nd\">:root</span> <span class=\"p\">{</span>\n  <span class=\"o\">--</span><span class=\"n\">myBackGroundColor</span><span class=\"o\">:</span> <span class=\"err\">{</span>\n    <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"nb\">red</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"o\">@</span><span class=\"n\">apply</span> <span class=\"o\">--</span><span class=\"n\">myBackGroundColor</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"reduced-calc\" class=\"fragment\"></span><a href=\"#reduced-calc\"><i class=\"fa fa-link\"></i></a>reduced <code>calc()</code>\n</h2>\n\n<p>数値計算を行います。</p>\n\n<p><code>calc()</code>の中に式を書きます。<br>\n式に単位が付いていてもOKです。</p>\n\n<p>reduced。。。？一般的な「減らす」の意味じゃないですよね。</p>\n\n<blockquote>\n<p>「整理して簡単な形に変える、まとめる」というしっくり来る説明を<a href=\"http://qiita.com/nyoro_712\">@nyoro_712</a>さんから貰いました。ありがとうございます。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">10px</span> <span class=\"o\">+</span> <span class=\"m\">20</span><span class=\"p\">);</span>\n  <span class=\"k\">min-width</span><span class=\"o\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">10</span> <span class=\"o\">*</span> <span class=\"m\">2px</span><span class=\"p\">);</span>\n  <span class=\"k\">height</span><span class=\"o\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100px</span> <span class=\"o\">/</span> <span class=\"m\">2</span><span class=\"p\">);</span>\n  <span class=\"k\">min-height</span><span class=\"o\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">10</span> <span class=\"o\">+</span> <span class=\"m\">20</span><span class=\"p\">)</span><span class=\"k\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"m\">30px</span><span class=\"p\">;</span>\n  <span class=\"k\">min-width</span><span class=\"o\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"o\">:</span> <span class=\"m\">50px</span><span class=\"p\">;</span>\n  <span class=\"k\">min-height</span><span class=\"o\">:</span> <span class=\"m\">30px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"custom-media-queries\" class=\"fragment\"></span><a href=\"#custom-media-queries\"><i class=\"fa fa-link\"></i></a>custom media queries</h2>\n\n<p>メディアクエリの定義に名前をつけることができます。</p>\n\n<p><code>@custom-media --変数名 〜</code>で定義して<code>@media (--変数名)</code>で使用します。</p>\n\n<p>iPadとかデバイス名指定できるの嬉しいですね。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">@custom-media</span> <span class=\"nt\">--iPad</span> <span class=\"nt\">only</span> <span class=\"nt\">screen</span> <span class=\"o\">(</span><span class=\"nt\">min-device-width</span><span class=\"o\">:</span> <span class=\"nt\">768px</span><span class=\"o\">)</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-device-width</span><span class=\"o\">:</span> <span class=\"nt\">1024px</span><span class=\"o\">)</span><span class=\"p\">;</span>\n\n<span class=\"k\">@media</span> <span class=\"o\">(</span><span class=\"nt\">--iPad</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"c\">/** css for ipad */</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">@media</span> <span class=\"nt\">only</span> <span class=\"nt\">screen</span> <span class=\"o\">(</span><span class=\"nt\">min-device-width</span><span class=\"o\">:</span> <span class=\"nt\">768px</span><span class=\"o\">)</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-device-width</span><span class=\"o\">:</span> <span class=\"nt\">1024px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"c\">/** css for ipad */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"media-queries-ranges\" class=\"fragment\"></span><a href=\"#media-queries-ranges\"><i class=\"fa fa-link\"></i></a>media queries ranges</h2>\n\n<p>不等号を使ってメディアクエリを定義できます。</p>\n\n<p>min, maxに変換してくれます。地味に嬉しい機能。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">@media</span> <span class=\"o\">(</span><span class=\"nt\">width</span> <span class=\"o\">&gt;=</span> <span class=\"nt\">500px</span><span class=\"o\">)</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">width</span> <span class=\"o\">&lt;</span> <span class=\"nt\">1201px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* your styles */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">@media</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">500px</span><span class=\"o\">)</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">1200px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* your styles */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"custom-selectors\" class=\"fragment\"></span><a href=\"#custom-selectors\"><i class=\"fa fa-link\"></i></a>custom selectors</h2>\n\n<p>セレクタを定義することができます。</p>\n\n<p><code>@custom-selector :--変数名</code>で定義しておいて<code>:--変数名</code>で仕様<br>\nつなげる事もできます。<br>\n大量のセレクタが作れますね。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">@custom-selector</span> <span class=\"nd\">:--header</span> <span class=\"nt\">h1</span><span class=\"o\">,</span> <span class=\"nt\">h2</span><span class=\"o\">,</span> <span class=\"nt\">h3</span><span class=\"o\">,</span> <span class=\"nt\">h4</span><span class=\"p\">;</span>\n<span class=\"k\">@custom-selector</span> <span class=\"nd\">:--hover</span> <span class=\"nd\">:hover</span><span class=\"p\">;</span>\n<span class=\"k\">@custom-selector</span> <span class=\"nd\">:--hoge</span> <span class=\"nc\">.hoge</span><span class=\"o\">,</span> <span class=\"nc\">.piyo</span><span class=\"o\">,</span> <span class=\"nc\">.fuga</span><span class=\"p\">;</span>\n\n<span class=\"nd\">:--header:--hover:--hoge</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* styles */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">h1</span><span class=\"nd\">:hover</span><span class=\"nc\">.hoge</span><span class=\"o\">,</span>\n<span class=\"nt\">h2</span><span class=\"nd\">:hover</span><span class=\"nc\">.hoge</span><span class=\"o\">,</span>\n<span class=\"nt\">h3</span><span class=\"nd\">:hover</span><span class=\"nc\">.hoge</span><span class=\"o\">,</span>\n<span class=\"nt\">h4</span><span class=\"nd\">:hover</span><span class=\"nc\">.hoge</span><span class=\"o\">,</span>\n<span class=\"nt\">h1</span><span class=\"nd\">:hover</span><span class=\"nc\">.piyo</span><span class=\"o\">,</span>\n<span class=\"nt\">h2</span><span class=\"nd\">:hover</span><span class=\"nc\">.piyo</span><span class=\"o\">,</span>\n<span class=\"nt\">h3</span><span class=\"nd\">:hover</span><span class=\"nc\">.piyo</span><span class=\"o\">,</span>\n<span class=\"nt\">h4</span><span class=\"nd\">:hover</span><span class=\"nc\">.piyo</span><span class=\"o\">,</span>\n<span class=\"nt\">h1</span><span class=\"nd\">:hover</span><span class=\"nc\">.fuga</span><span class=\"o\">,</span>\n<span class=\"nt\">h2</span><span class=\"nd\">:hover</span><span class=\"nc\">.fuga</span><span class=\"o\">,</span>\n<span class=\"nt\">h3</span><span class=\"nd\">:hover</span><span class=\"nc\">.fuga</span><span class=\"o\">,</span>\n<span class=\"nt\">h4</span><span class=\"nd\">:hover</span><span class=\"nc\">.fuga</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* styles */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"nesting\" class=\"fragment\"></span><a href=\"#nesting\"><i class=\"fa fa-link\"></i></a>nesting</h2>\n\n<p>Sassでもおなじみのネスト記法が使えます。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span><span class=\"nb\">red</span><span class=\"p\">;</span>\n\n  <span class=\"o\">&amp;</span> <span class=\"n\">span</span> <span class=\"err\">{</span>\n    <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">white</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span><span class=\"nb\">red</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">a</span> <span class=\"nt\">span</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span><span class=\"nb\">white</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"color-function\" class=\"fragment\"></span><a href=\"#color-function\"><i class=\"fa fa-link\"></i></a><code>color()</code> function</h2>\n\n<p>color()関数で色を指定できます。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">color</span><span class=\"p\">(</span><span class=\"nb\">red</span> <span class=\"n\">blackness</span><span class=\"p\">(</span><span class=\"m\">50%</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">a</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">color</span><span class=\"p\">(</span><span class=\"nb\">red</span> <span class=\"n\">blackness</span><span class=\"p\">(</span><span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"n\">whiteness</span><span class=\"p\">(</span><span class=\"m\">25%</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">rgb</span><span class=\"p\">(</span><span class=\"m\">128</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">a</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">rgb</span><span class=\"p\">(</span><span class=\"m\">128</span><span class=\"o\">,</span> <span class=\"m\">64</span><span class=\"o\">,</span> <span class=\"m\">64</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"hwb-function\" class=\"fragment\"></span><a href=\"#hwb-function\"><i class=\"fa fa-link\"></i></a><code>hwb()</code> function</h2>\n\n<p>HWB形式で色指定が可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"n\">hwb</span><span class=\"p\">(</span><span class=\"m\">90</span><span class=\"o\">,</span> <span class=\"m\">0%</span><span class=\"o\">,</span> <span class=\"m\">0%</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">128</span><span class=\"o\">,</span> <span class=\"m\">255</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HSLと似ているので比較</p>\n\n<h3>\n<span id=\"hsl\" class=\"fragment\"></span><a href=\"#hsl\"><i class=\"fa fa-link\"></i></a>HSL</h3>\n\n<p>HSLは色相・彩度・明度（Hue, Saturation, Lightness）<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/35595/7ce9a91e-65e4-ed59-a995-3184cb515fb6.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/35595/7ce9a91e-65e4-ed59-a995-3184cb515fb6.png\" width=\"150px\"></a></p>\n\n<h3>\n<span id=\"hwb\" class=\"fragment\"></span><a href=\"#hwb\"><i class=\"fa fa-link\"></i></a>HWB</h3>\n\n<p>HWBは色相・白味・黒味（Hue, Whiteness, Blackness）<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/35595/d34f721b-32ee-c0f7-a0d1-d35c73b0e99e.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/35595/d34f721b-32ee-c0f7-a0d1-d35c73b0e99e.png\" width=\"150px\"></a></p>\n\n<p>HWBのが直感的にイメージしやすいと思います。</p>\n\n<h2>\n<span id=\"gray-function\" class=\"fragment\"></span><a href=\"#gray-function\"><i class=\"fa fa-link\"></i></a><code>gray()</code> function</h2>\n\n<p>灰色をあらわすための関数が追加。<br>\nrgb(),rgba()に変換します。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nc\">.foo</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">gray</span><span class=\"p\">(</span><span class=\"m\">85</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.bar</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">gray</span><span class=\"p\">(</span><span class=\"m\">10%</span><span class=\"o\">,</span> <span class=\"m\">50%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nc\">.foo</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">rgb</span><span class=\"p\">(</span><span class=\"m\">85</span><span class=\"o\">,</span> <span class=\"m\">85</span><span class=\"o\">,</span> <span class=\"m\">85</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.bar</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">26</span><span class=\"o\">,</span> <span class=\"m\">26</span><span class=\"o\">,</span> <span class=\"m\">26</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rrggbbaa-colors\" class=\"fragment\"></span><a href=\"#rrggbbaa-colors\"><i class=\"fa fa-link\"></i></a><code>#rrggbbaa</code> colors</h2>\n\n<p>透明度が追加され、#rrggbbaaの形式で定義できます。</p>\n\n<p><code>#rgba</code>でもOK。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"m\">#9d9c</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#001020</span><span class=\"n\">ff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">221</span><span class=\"o\">,</span> <span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">8</span><span class=\"p\">);</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"o\">,</span> <span class=\"m\">16</span><span class=\"o\">,</span> <span class=\"m\">32</span><span class=\"o\">,</span> <span class=\"m\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rgba-function-rgb-fallback\" class=\"fragment\"></span><a href=\"#rgba-function-rgb-fallback\"><i class=\"fa fa-link\"></i></a><code>rgba</code> function (<code>rgb</code> fallback)</h2>\n\n<p>rgba()に対応していないIE8のために#rgbに変換します。</p>\n\n<p>これはplaygroundでは有効になっていないみたいです。<br>\n<a href=\"http://caniuse.com/#feat=css3-colors\" rel=\"nofollow\" target=\"_blank\">rgbaに対応してないのはもうIE8のみ</a>みたいなので外したのかも。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">221</span><span class=\"o\">,</span> <span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">8</span><span class=\"p\">);</span>\n  <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"k\">solid</span> <span class=\"m\">1px</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">100</span><span class=\"o\">,</span><span class=\"m\">102</span><span class=\"o\">,</span><span class=\"m\">103</span><span class=\"o\">,.</span><span class=\"m\">3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"m\">#99dd99</span><span class=\"p\">;</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">221</span><span class=\"o\">,</span> <span class=\"m\">153</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">8</span><span class=\"p\">);</span>\n  <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"k\">solid</span> <span class=\"m\">1px</span> <span class=\"m\">#646667</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"k\">solid</span> <span class=\"m\">1px</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">100</span><span class=\"o\">,</span><span class=\"m\">102</span><span class=\"o\">,</span><span class=\"m\">103</span><span class=\"o\">,.</span><span class=\"m\">3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rebeccapurple-color\" class=\"fragment\"></span><a href=\"#rebeccapurple-color\"><i class=\"fa fa-link\"></i></a><code>rebeccapurple</code> color</h2>\n\n<p>レベッカパープルという紫色をあらわす指定が追加されます。<br>\n<a href=\"https://cpplover.blogspot.jp/2014/06/rebeccapurplecss-4-color.html\" rel=\"nofollow\" target=\"_blank\">rebeccapurpleがCSS 4 colorに提案された経緯</a>に経緯がまとまっているので見てみてください<img class=\"emoji\" title=\":cry:\" alt=\":cry:\" src=\"https://cdn.qiita.com/emoji/unicode/1f622.png\" height=\"20\" width=\"20\" align=\"absmiddle\"> </p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"n\">rebeccapurple</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"k\">rgb</span><span class=\"p\">(</span><span class=\"m\">102</span><span class=\"o\">,</span> <span class=\"m\">51</span><span class=\"o\">,</span> <span class=\"m\">153</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"font-variant-property\" class=\"fragment\"></span><a href=\"#font-variant-property\"><i class=\"fa fa-link\"></i></a><code>font-variant</code> property</h2>\n\n<p><code>font-variant-xxx</code>を<code>font-feature-settings</code>の形に変換するらしい。<br>\n<code>font-variant</code>はなくなるってことなのかな。ちょっとだけ調べてみましたが良くわからなかった。。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">h2</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-variant</span><span class=\"o\">-</span><span class=\"n\">caps</span><span class=\"o\">:</span> <span class=\"k\">small-caps</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">table</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-variant</span><span class=\"o\">-</span><span class=\"n\">numeric</span><span class=\"o\">:</span> <span class=\"n\">lining</span><span class=\"o\">-</span><span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">h2</span> <span class=\"p\">{</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"k\">font</span><span class=\"o\">-</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">settings</span><span class=\"o\">:</span> <span class=\"s2\">\"c2sc\"</span><span class=\"p\">;</span>\n          <span class=\"k\">font</span><span class=\"o\">-</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">settings</span><span class=\"o\">:</span> <span class=\"s2\">\"c2sc\"</span><span class=\"p\">;</span>\n  <span class=\"k\">font-variant</span><span class=\"o\">-</span><span class=\"n\">caps</span><span class=\"o\">:</span> <span class=\"k\">small-caps</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">table</span> <span class=\"p\">{</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"k\">font</span><span class=\"o\">-</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">settings</span><span class=\"o\">:</span> <span class=\"s2\">\"lnum\"</span><span class=\"p\">;</span>\n          <span class=\"k\">font</span><span class=\"o\">-</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">settings</span><span class=\"o\">:</span> <span class=\"s2\">\"lnum\"</span><span class=\"p\">;</span>\n  <span class=\"k\">font-variant</span><span class=\"o\">-</span><span class=\"n\">numeric</span><span class=\"o\">:</span> <span class=\"n\">lining</span><span class=\"o\">-</span><span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"filter-property\" class=\"fragment\"></span><a href=\"#filter-property\"><i class=\"fa fa-link\"></i></a><code>filter</code> property</h2>\n\n<p>filterに対応していないFirefox35未満でfilterを使えるようにする機能です。</p>\n\n<p>オプションで<code>oldIE:true</code>を指定すると古いIEでも使えそうな記述あり。</p>\n\n<p>フィルタ自体は以下記事を参照<br>\n<a href=\"http://qiita.com/bluebird/items/a3f55206984fa8105e39\" id=\"reference-e95c6893142328b01379\">CSSフィルタことはじめ</a></p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nc\">.blur</span> <span class=\"p\">{</span>\n    <span class=\"n\">filter</span><span class=\"o\">:</span><span class=\"n\">sepia</span><span class=\"p\">(</span><span class=\"m\">100%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nc\">.blur</span> <span class=\"p\">{</span>\n    <span class=\"n\">filter</span><span class=\"o\">:</span><span class=\"sx\">url('data:image/svg+xml;charset=utf-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;filter id=\"filter\"&gt;&lt;feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.393 0.769 0.189 0 0 0.349 0.686 0.168 0 0 0.272 0.534 0.131 0 0 0 0 0 1 0\" /&gt;&lt;/filter&gt;&lt;/svg&gt;#filter')</span><span class=\"p\">;</span>\n    <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">filter</span><span class=\"o\">:</span><span class=\"n\">sepia</span><span class=\"p\">(</span><span class=\"m\">100%</span><span class=\"p\">);</span>\n            <span class=\"n\">filter</span><span class=\"o\">:</span><span class=\"n\">sepia</span><span class=\"p\">(</span><span class=\"m\">100%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"initial-value\" class=\"fragment\"></span><a href=\"#initial-value\"><i class=\"fa fa-link\"></i></a><code>initial</code> value</h2>\n\n<p>スタイルをリセットする事が可能。</p>\n\n<p>この<code>all: initial</code>は目玉機能だそうな。<br>\nどうもCSSに詳しい人には嬉しい機能らしい。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"n\">all</span><span class=\"o\">:</span> <span class=\"n\">initial</span><span class=\"p\">;</span> <span class=\"c\">/* use initial for ALL PROPERTIES in one shot */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">animation</span><span class=\"o\">:</span> <span class=\"k\">none</span> <span class=\"m\">0s</span> <span class=\"n\">ease</span> <span class=\"m\">0s</span> <span class=\"m\">1</span> <span class=\"k\">normal</span> <span class=\"k\">none</span> <span class=\"n\">running</span><span class=\"p\">;</span>\n          <span class=\"n\">animation</span><span class=\"o\">:</span> <span class=\"k\">none</span> <span class=\"m\">0s</span> <span class=\"n\">ease</span> <span class=\"m\">0s</span> <span class=\"m\">1</span> <span class=\"k\">normal</span> <span class=\"k\">none</span> <span class=\"n\">running</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">backface</span><span class=\"o\">-</span><span class=\"k\">visibility</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n          <span class=\"n\">backface</span><span class=\"o\">-</span><span class=\"k\">visibility</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n  <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"k\">transparent</span> <span class=\"k\">none</span> <span class=\"k\">repeat</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"o\">/</span> <span class=\"k\">auto</span> <span class=\"k\">auto</span> <span class=\"k\">padding</span><span class=\"o\">-</span><span class=\"n\">box</span> <span class=\"k\">border</span><span class=\"o\">-</span><span class=\"n\">box</span> <span class=\"k\">scroll</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"k\">medium</span> <span class=\"k\">none</span> <span class=\"n\">currentColor</span><span class=\"p\">;</span>\n  <span class=\"k\">border-collapse</span><span class=\"o\">:</span> <span class=\"k\">separate</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">o</span><span class=\"o\">-</span><span class=\"k\">border</span><span class=\"o\">-</span><span class=\"n\">image</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n     <span class=\"k\">border</span><span class=\"o\">-</span><span class=\"n\">image</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"o\">-</span><span class=\"n\">radius</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">border-spacing</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">bottom</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"n\">box</span><span class=\"o\">-</span><span class=\"n\">shadow</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"n\">box</span><span class=\"o\">-</span><span class=\"n\">sizing</span><span class=\"o\">:</span> <span class=\"k\">content</span><span class=\"o\">-</span><span class=\"n\">box</span><span class=\"p\">;</span>\n  <span class=\"k\">caption-side</span><span class=\"o\">:</span> <span class=\"k\">top</span><span class=\"p\">;</span>\n  <span class=\"k\">clear</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">clip</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#000</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">columns</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">columns</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n          <span class=\"n\">columns</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">count</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">count</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">count</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">fill</span><span class=\"o\">:</span> <span class=\"n\">balance</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">fill</span><span class=\"o\">:</span> <span class=\"n\">balance</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">fill</span><span class=\"o\">:</span> <span class=\"n\">balance</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">gap</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">gap</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">gap</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"k\">medium</span> <span class=\"k\">none</span> <span class=\"n\">currentColor</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"k\">medium</span> <span class=\"k\">none</span> <span class=\"n\">currentColor</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"k\">medium</span> <span class=\"k\">none</span> <span class=\"n\">currentColor</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">span</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">span</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">span</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n     <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">column</span><span class=\"o\">-</span><span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n          <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">content</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">counter-increment</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">counter-reset</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">cursor</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">direction</span><span class=\"o\">:</span> <span class=\"k\">ltr</span><span class=\"p\">;</span>\n  <span class=\"k\">display</span><span class=\"o\">:</span> <span class=\"k\">inline</span><span class=\"p\">;</span>\n  <span class=\"k\">empty-cells</span><span class=\"o\">:</span> <span class=\"k\">show</span><span class=\"p\">;</span>\n  <span class=\"k\">float</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">font-family</span><span class=\"o\">:</span> <span class=\"k\">serif</span><span class=\"p\">;</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"k\">medium</span><span class=\"p\">;</span>\n  <span class=\"k\">font-style</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">font-variant</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">font-weight</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">font-stretch</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">line-height</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">hyphens</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n      <span class=\"o\">-</span><span class=\"n\">ms</span><span class=\"o\">-</span><span class=\"n\">hyphens</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n          <span class=\"n\">hyphens</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">left</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">letter-spacing</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">list-style</span><span class=\"o\">:</span> <span class=\"k\">disc</span> <span class=\"k\">outside</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">max-height</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">max-width</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">min-height</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">min-width</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">opacity</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">orphans</span><span class=\"o\">:</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">outline</span><span class=\"o\">:</span> <span class=\"k\">medium</span> <span class=\"k\">none</span> <span class=\"k\">invert</span><span class=\"p\">;</span>\n  <span class=\"k\">overflow</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n  <span class=\"k\">overflow-x</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n  <span class=\"k\">overflow-y</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n  <span class=\"k\">padding</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">page</span><span class=\"o\">-</span><span class=\"n\">break</span><span class=\"o\">-</span><span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">page</span><span class=\"o\">-</span><span class=\"n\">break</span><span class=\"o\">-</span><span class=\"n\">before</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">page</span><span class=\"o\">-</span><span class=\"n\">break</span><span class=\"o\">-</span><span class=\"k\">inside</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">perspective</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n          <span class=\"n\">perspective</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">perspective</span><span class=\"o\">-</span><span class=\"n\">origin</span><span class=\"o\">:</span> <span class=\"m\">50%</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n          <span class=\"n\">perspective</span><span class=\"o\">-</span><span class=\"n\">origin</span><span class=\"o\">:</span> <span class=\"m\">50%</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"k\">position</span><span class=\"o\">:</span> <span class=\"k\">static</span><span class=\"p\">;</span>\n  <span class=\"k\">right</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"k\">size</span><span class=\"o\">:</span> <span class=\"m\">8</span><span class=\"p\">;</span>\n    <span class=\"o\">-</span><span class=\"n\">o</span><span class=\"o\">-</span><span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"k\">size</span><span class=\"o\">:</span> <span class=\"m\">8</span><span class=\"p\">;</span>\n       <span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"k\">size</span><span class=\"o\">:</span> <span class=\"m\">8</span><span class=\"p\">;</span>\n  <span class=\"k\">table-layout</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">text-align</span><span class=\"o\">:</span> <span class=\"k\">left</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">moz</span><span class=\"o\">-</span><span class=\"k\">text-align</span><span class=\"o\">-</span><span class=\"n\">last</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n       <span class=\"k\">text-align</span><span class=\"o\">-</span><span class=\"n\">last</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">text-decoration</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">text-indent</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">text-shadow</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">text-transform</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"k\">top</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">transform</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n          <span class=\"n\">transform</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">transform</span><span class=\"o\">-</span><span class=\"n\">origin</span><span class=\"o\">:</span> <span class=\"m\">50%</span> <span class=\"m\">50%</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n          <span class=\"n\">transform</span><span class=\"o\">-</span><span class=\"n\">origin</span><span class=\"o\">:</span> <span class=\"m\">50%</span> <span class=\"m\">50%</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">transform</span><span class=\"o\">-</span><span class=\"n\">style</span><span class=\"o\">:</span> <span class=\"n\">flat</span><span class=\"p\">;</span>\n          <span class=\"n\">transform</span><span class=\"o\">-</span><span class=\"n\">style</span><span class=\"o\">:</span> <span class=\"n\">flat</span><span class=\"p\">;</span>\n  <span class=\"o\">-</span><span class=\"n\">webkit</span><span class=\"o\">-</span><span class=\"n\">transition</span><span class=\"o\">:</span> <span class=\"k\">none</span> <span class=\"m\">0s</span> <span class=\"n\">ease</span> <span class=\"m\">0s</span><span class=\"p\">;</span>\n  <span class=\"n\">transition</span><span class=\"o\">:</span> <span class=\"k\">none</span> <span class=\"m\">0s</span> <span class=\"n\">ease</span> <span class=\"m\">0s</span><span class=\"p\">;</span>\n  <span class=\"k\">unicode-bidi</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">vertical-align</span><span class=\"o\">:</span> <span class=\"k\">baseline</span><span class=\"p\">;</span>\n  <span class=\"k\">visibility</span><span class=\"o\">:</span> <span class=\"k\">visible</span><span class=\"p\">;</span>\n  <span class=\"k\">white-space</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">widows</span><span class=\"o\">:</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"k\">word-spacing</span><span class=\"o\">:</span> <span class=\"k\">normal</span><span class=\"p\">;</span>\n  <span class=\"k\">z-index</span><span class=\"o\">:</span> <span class=\"k\">auto</span><span class=\"p\">;</span>\n  <span class=\"n\">all</span><span class=\"o\">:</span> <span class=\"n\">initial</span><span class=\"p\">;</span> <span class=\"c\">/* use initial for ALL PROPERTIES in one shot */</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rem-unit-px-fallback\" class=\"fragment\"></span><a href=\"#rem-unit-px-fallback\"><i class=\"fa fa-link\"></i></a><code>rem</code> unit (<code>px</code> fallback)</h2>\n\n<p>remに対応していないIE8のためにpxを追加してくれます。</p>\n\n<p>rem自体は以下記事を参照<br>\n<a href=\"http://qiita.com/elly/items/da92e63641760a69a3be\" id=\"reference-3a5b114c715876395131\">remってなに？</a></p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"n\">rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">24px</span><span class=\"p\">;</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"o\">.</span><span class=\"m\">5</span><span class=\"n\">rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"any-link-pseudo-class\" class=\"fragment\"></span><a href=\"#any-link-pseudo-class\"><i class=\"fa fa-link\"></i></a><code>:any-link</code> pseudo-class</h2>\n\n<p><code>:link</code>, <code>:visited</code>を1つの定義で可能にします。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">nav</span> <span class=\"nd\">:any-link</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"nb\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">nav</span> <span class=\"nd\">:link</span><span class=\"o\">,</span><span class=\"nt\">nav</span> <span class=\"nd\">:visited</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"nb\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"matches-pseudo-class\" class=\"fragment\"></span><a href=\"#matches-pseudo-class\"><i class=\"fa fa-link\"></i></a><code>:matches</code> pseudo-class</h2>\n\n<p>セレクタをグルーピングできます。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">p</span><span class=\"nd\">:matches</span><span class=\"o\">(</span><span class=\"nd\">:first-child</span><span class=\"o\">,</span> <span class=\"nc\">.special</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">p</span><span class=\"nd\">:first-child</span><span class=\"o\">,</span> <span class=\"nt\">p</span><span class=\"nc\">.special</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"not-pseudo-class\" class=\"fragment\"></span><a href=\"#not-pseudo-class\"><i class=\"fa fa-link\"></i></a><code>:not</code> pseudo-class</h2>\n\n<p>matchesの<code>:not</code>版です。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">p</span><span class=\"nd\">:not</span><span class=\"o\">(</span><span class=\"nd\">:first-child</span><span class=\"o\">,</span> <span class=\"nc\">.special</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">p</span><span class=\"nd\">:not</span><span class=\"o\">(</span><span class=\"nd\">:first-child</span><span class=\"o\">)</span><span class=\"nd\">:not</span><span class=\"o\">(</span><span class=\"nc\">.special</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"-pseudo-syntax--fallback\" class=\"fragment\"></span><a href=\"#-pseudo-syntax--fallback\"><i class=\"fa fa-link\"></i></a><code>::</code> pseudo syntax (<code>:</code> fallback)</h2>\n\n<p>IE8のために<code>::</code>を<code>:</code>に変換します。</p>\n\n<p>IE8はもう死んだんだ。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span><span class=\"o\">:</span><span class=\"nd\">:before</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">a</span><span class=\"nd\">:before</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"overflow-wrap-property-word-wrap-fallback\" class=\"fragment\"></span><a href=\"#overflow-wrap-property-word-wrap-fallback\"><i class=\"fa fa-link\"></i></a><code>overflow-wrap</code> property (<code>word-wrap</code> fallback)</h2>\n\n<p><code>overflow-wrap</code>を<code>word-wrap</code>に変換します。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">overflow</span><span class=\"o\">-</span><span class=\"n\">wrap</span><span class=\"o\">:</span> <span class=\"n\">break</span><span class=\"o\">-</span><span class=\"n\">word</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"n\">word</span><span class=\"o\">-</span><span class=\"n\">wrap</span><span class=\"o\">:</span> <span class=\"n\">break</span><span class=\"o\">-</span><span class=\"n\">word</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"attribute-case-insensitive\" class=\"fragment\"></span><a href=\"#attribute-case-insensitive\"><i class=\"fa fa-link\"></i></a>attribute case insensitive</h2>\n\n<p>大文字小文字を無視する属性セレクタのオプション<code>i</code>が追加。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"o\">[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">abc</span> <span class=\"nt\">i</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"k\">border-style</span><span class=\"o\">:</span> <span class=\"k\">solid</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"o\">[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">abc</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">Abc</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">aBc</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">ABc</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">abC</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">AbC</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">aBC</span><span class=\"o\">],[</span><span class=\"nt\">attr</span><span class=\"o\">=</span><span class=\"nt\">ABC</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"k\">border-style</span><span class=\"o\">:</span> <span class=\"k\">solid</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"あとがき\" class=\"fragment\"></span><a href=\"#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D\"><i class=\"fa fa-link\"></i></a>あとがき</h2>\n\n<p>Sassだ、LESSだ、Stylusだ、Compassだ、cssnextだ、とCSS界隈もかなり混沌としている気がします<img class=\"emoji\" title=\":sweat:\" alt=\":sweat:\" src=\"https://cdn.qiita.com/emoji/unicode/1f613.png\" height=\"20\" width=\"20\" align=\"absmiddle\"> <br>\nいつかCSSだけで済む日が来るといいですね<img class=\"emoji\" title=\":smile:\" alt=\":smile:\" src=\"https://cdn.qiita.com/emoji/unicode/1f604.png\" height=\"20\" width=\"20\" align=\"absmiddle\"> </p>\n",
    "stock_users": [
        "Layzie",
        "kawanamiyuu",
        "sibukixxx",
        "keitaoouchi",
        "umeume66",
        "cyber_snufkin",
        "n_slender",
        "minamiland@github",
        "MasatoYoshioka@github",
        "tera911",
        "resistance_gowy",
        "pokkur",
        "cotto89",
        "howdy39",
        "milkmeta",
        "hennry",
        "opponitur",
        "koukun",
        "ada-n",
        "mismith",
        "makipe",
        "nyoro_712",
        "nabenabetwi",
        "StudioPlumCreek",
        "Kurone",
        "ngocsonqs",
        "spank",
        "2kei7"
    ]
}, {
    "id": 421227,
    "uuid": "6748bdf042768dd078ed",
    "user": {
        "id": 117824,
        "url_name": "suzuki_koya",
        "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/117824/46b9f5400efed282a6fc3beebe3cd3d6a6c61f0d/medium.png?1463966133",
        "following": false
    },
    "title": "RailsのローカルでSQLiteを使う時",
    "created_at": "2016-09-08 02:20:42 +0900",
    "updated_at": "2016-09-08 02:20:42 +0900",
    "created_at_in_words": "約13時間",
    "updated_at_in_words": "約13時間",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }, {
        "name": "SQLite3",
        "url_name": "sqlite3",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/suzuki_koya/items/6748bdf042768dd078ed",
    "created_at_as_seconds": 1473268842,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "#RailsのローカルでSQLiteを使う\n\nRailsアプリケーションを触っている時に本番環境はPostgreSQLだけど\nローカルはSQLiteだったって時に\n\n##接続する\n```cl\n$ sqlite3 db/development.sqlite3\n```\nもしくは\n\n```cl\n$ rails db\n```\nで接続できます！\n\n##データベース一覧\n```\nsqlite> .databases\n```\nこれでデータベースの一覧を確認\n\n##テーブル一覧\n```\nsqlite> .tables\n```\nこれでテーブル一覧を取得\n\n##SQL文\n```\nsqlite> select * from user;\n```\nもちろんSQL文もそのまま打てます！\n\n##スキーマ表示\n```\nsqlite> .schema users \n```\nスキーマのデーブルも確認できます！\n\n##終了\n```\nsqlite> .exit\n```\nこれで終了\n",
    "body": "\n<h1>\n<span id=\"railsのローカルでsqliteを使う\" class=\"fragment\"></span><a href=\"#rails%E3%81%AE%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7sqlite%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>RailsのローカルでSQLiteを使う</h1>\n\n<p>Railsアプリケーションを触っている時に本番環境はPostgreSQLだけど<br>\nローカルはSQLiteだったって時に</p>\n\n<h2>\n<span id=\"接続する\" class=\"fragment\"></span><a href=\"#%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>接続する</h2>\n\n<div class=\"code-frame\" data-lang=\"cl\"><div class=\"highlight\"><pre>\n<span class=\"nv\">$</span> <span class=\"nv\">sqlite3</span> <span class=\"nv\">db/development.sqlite3</span>\n</pre></div></div>\n\n<p>もしくは</p>\n\n<div class=\"code-frame\" data-lang=\"cl\"><div class=\"highlight\"><pre>\n<span class=\"nv\">$</span> <span class=\"nv\">rails</span> <span class=\"nv\">db</span>\n</pre></div></div>\n\n<p>で接続できます！</p>\n\n<h2>\n<span id=\"データベース一覧\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E4%B8%80%E8%A6%A7\"><i class=\"fa fa-link\"></i></a>データベース一覧</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nsqlite&gt; .databases\n</pre></div></div>\n\n<p>これでデータベースの一覧を確認</p>\n\n<h2>\n<span id=\"テーブル一覧\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E4%B8%80%E8%A6%A7\"><i class=\"fa fa-link\"></i></a>テーブル一覧</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nsqlite&gt; .tables\n</pre></div></div>\n\n<p>これでテーブル一覧を取得</p>\n\n<h2>\n<span id=\"sql文\" class=\"fragment\"></span><a href=\"#sql%E6%96%87\"><i class=\"fa fa-link\"></i></a>SQL文</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nsqlite&gt; select * from user;\n</pre></div></div>\n\n<p>もちろんSQL文もそのまま打てます！</p>\n\n<h2>\n<span id=\"スキーマ表示\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>スキーマ表示</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nsqlite&gt; .schema users \n</pre></div></div>\n\n<p>スキーマのデーブルも確認できます！</p>\n\n<h2>\n<span id=\"終了\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E4%BA%86\"><i class=\"fa fa-link\"></i></a>終了</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nsqlite&gt; .exit\n</pre></div></div>\n\n<p>これで終了</p>\n",
    "stock_users": []
}, {
    "id": 421209,
    "uuid": "ba21ff5934f7d41a89ef",
    "user": {
        "id": 136286,
        "url_name": "mo4_9",
        "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/136286/33a56867cb5c6b6b8adf451c6df4178ed8d7cc32/medium.png?1472680223",
        "following": false
    },
    "title": "環境マッピング",
    "created_at": "2016-09-08 00:45:58 +0900",
    "updated_at": "2016-09-08 00:53:18 +0900",
    "created_at_in_words": "約15時間",
    "updated_at_in_words": "約14時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "WebGL",
        "url_name": "webgl",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8e6240a62e8594ddc3fe4933701dad8b2170acb9/medium.jpg?1423025366",
        "following": false,
        "versions": []
    }, {
        "name": "three.js",
        "url_name": "three.js",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9afd8c172eff2a1804e2c65052e8bfe4773f21c2/medium.jpg?1468150349",
        "following": false,
        "versions": []
    }, {
        "name": "es6",
        "url_name": "es6",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fd10bf1536300af8ebc55869d22e26e1046a2eaa/medium.jpg?1421232818",
        "following": true,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 1,
    "url": "http://qiita.com/mo4_9/items/ba21ff5934f7d41a89ef",
    "created_at_as_seconds": 1473263158,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "\nr78\n\nデモ：https://mo49.github.io/qiita/20160908/envmap.html\n\nskyboxをつくって、その中にオブジェクトを2つ配置。\nsphereは他のオブジェクトも反射する動的環境マッピングをやってみる。\n\n\n## CubeMapオブジェクトをつくる\n\nまず、サイコロの展開図みたいな6面の画像を用意する\n\nCubeMap用の画像を配布しているサイト\nhttp://www.humus.name/index.php?page=Textures\n\n360度画像をCubeMap用に変換してくれるサイト\nhttp://gonchar.me/panorama/\n\n\n```javascript:画像をロードする\n// cube texturesをロードする\ncreateCubeMap (geom, imageFile) {\n  const PATH = './img/envmap/';\n  const FORMAT = '.jpg';\n  const URLS = [\n    PATH + 'posx' + FORMAT, PATH + 'negx' + FORMAT,\n    PATH + 'posy' + FORMAT, PATH + 'negy' + FORMAT,\n    PATH + 'posz' + FORMAT, PATH + 'negz' + FORMAT\n  ];\n\n  const cubeTextureLoader = new THREE.CubeTextureLoader();\n  const textureCube = cubeTextureLoader.load(URLS);\n  return textureCube;\n}\n```\n\n## skyboxをつくる\n\nshaderにCubeMapオブジェクトを渡す\n\n```javascript:skyboxをつくる\nthis.textureCube = this.createCubeMap();\nthis.textureCube.format = THREE.RGBFormat;\nthis.textureCube.mapping = THREE.CubeReflectionMapping; // 屈折\n// CubeMapに基づいて環境を作成できる特殊なshader\nconst shader = THREE.ShaderLib[\"cube\"];\nshader.uniforms[\"tCube\"].value = this.textureCube;\n\nconst material = new THREE.ShaderMaterial({\n  fragmentShader: shader.fragmentShader,\n  vertexShader: shader.vertexShader,\n  uniforms: shader.uniforms,\n  depthWrite: false,\n  side: THREE.DoubleSide\n});\n\nconst skybox = new THREE.Mesh(new THREE.BoxGeometry(10000, 10000, 10000), material);\nthis.scene.add(skybox);\n```\n\n## CubeCameraを使う\n\n動的な環境マッピングには必須なcamera\n\n```javascript:カメラを用意\nthis.cubeCamera = new THREE.CubeCamera(0.1, 20000, 256);\nthis.scene.add(this.cubeCamera);\n```\n\n毎フレームごとに更新することも忘れずに。\n\n```javascript:カメラを更新する\nrender() {\n\n  ・・・（中略）・・・\n\n  // 一度sphereを消してCubeMapを更新してから表示する\n  this.sphere.visible = false;\n  this.cubeCamera.updateCubeMap(this.renderer, this.scene);\n  this.sphere.visible = true;\n}\n```\n\n\n## Sphere, TorusKnotを追加\n\nenvMapにどのように環境を反射するか記述\nsphere -> 動的環境マッピング\ntorusknot -> 静的環境マッピング\n\n```javascript:オブジェクトを追加\nconst sphereGeometry = new THREE.SphereGeometry(20, 15, 15);\nconst torusGeometry = new THREE.TorusKnotGeometry(60, 2, 256, 8, 4, 3, 1);\nconst torusGeometry2 = new THREE.TorusKnotGeometry(150, 2, 512, 8, 6, 4, 1);\n\nconst dynamicEnvMaterial = new THREE.MeshBasicMaterial({\n  envMap: this.cubeCamera.renderTarget, // cubeCameraを設定、シーン内の他のオブジェクトも反射\n  side: THREE.DoubleSide\n});\nconst envMaterial = new THREE.MeshBasicMaterial({\n  envMap: this.textureCube, // 作成したcubeMapオブジェクトを設定することで、meshはその環境を反射\n  side: THREE.DoubleSide\n});\n\nthis.sphere = new THREE.Mesh(sphereGeometry, dynamicEnvMaterial);\nthis.scene.add(this.sphere);\n\nconst torus = new THREE.Mesh(torusGeometry, envMaterial);\nconst torus2 = new THREE.Mesh(torusGeometry2, envMaterial);\ntorus.material.reflectivity = 1.0; // 反射率 (同じマテリアルを適応しているのでtorus2も影響を受けるのに注意)\nthis.scene.add(torus, torus2);\n```\n\n> 参考\n[初めてのThree.js 第2版――WebGLのためのJavaScript 3Dライブラリ](https://www.oreilly.co.jp/books/9784873117706/)\n",
    "body": "<p>r78</p>\n\n<p>デモ：<a href=\"https://mo49.github.io/qiita/20160908/envmap.html\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://mo49.github.io/qiita/20160908/envmap.html</a></p>\n\n<p>skyboxをつくって、その中にオブジェクトを2つ配置。<br>\nsphereは他のオブジェクトも反射する動的環境マッピングをやってみる。</p>\n\n<h2>\n<span id=\"cubemapオブジェクトをつくる\" class=\"fragment\"></span><a href=\"#cubemap%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B\"><i class=\"fa fa-link\"></i></a>CubeMapオブジェクトをつくる</h2>\n\n<p>まず、サイコロの展開図みたいな6面の画像を用意する</p>\n\n<p>CubeMap用の画像を配布しているサイト<br>\n<a href=\"http://www.humus.name/index.php?page=Textures\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.humus.name/index.php?page=Textures</a></p>\n\n<p>360度画像をCubeMap用に変換してくれるサイト<br>\n<a href=\"http://gonchar.me/panorama/\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://gonchar.me/panorama/</a></p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">画像をロードする</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c1\">// cube texturesをロードする</span>\n<span class=\"nx\">createCubeMap</span> <span class=\"p\">(</span><span class=\"nx\">geom</span><span class=\"p\">,</span> <span class=\"nx\">imageFile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">PATH</span> <span class=\"o\">=</span> <span class=\"s1\">'./img/envmap/'</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'.jpg'</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">URLS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'posx'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span><span class=\"p\">,</span> <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'negx'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span><span class=\"p\">,</span>\n    <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'posy'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span><span class=\"p\">,</span> <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'negy'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span><span class=\"p\">,</span>\n    <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'posz'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span><span class=\"p\">,</span> <span class=\"nx\">PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'negz'</span> <span class=\"o\">+</span> <span class=\"nx\">FORMAT</span>\n  <span class=\"p\">];</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">cubeTextureLoader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">CubeTextureLoader</span><span class=\"p\">();</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">textureCube</span> <span class=\"o\">=</span> <span class=\"nx\">cubeTextureLoader</span><span class=\"p\">.</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">URLS</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">textureCube</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"skyboxをつくる\" class=\"fragment\"></span><a href=\"#skybox%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B\"><i class=\"fa fa-link\"></i></a>skyboxをつくる</h2>\n\n<p>shaderにCubeMapオブジェクトを渡す</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">skyboxをつくる</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">textureCube</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createCubeMap</span><span class=\"p\">();</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">textureCube</span><span class=\"p\">.</span><span class=\"nx\">format</span> <span class=\"o\">=</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">RGBFormat</span><span class=\"p\">;</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">textureCube</span><span class=\"p\">.</span><span class=\"nx\">mapping</span> <span class=\"o\">=</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">CubeReflectionMapping</span><span class=\"p\">;</span> <span class=\"c1\">// 屈折</span>\n<span class=\"c1\">// CubeMapに基づいて環境を作成できる特殊なshader</span>\n<span class=\"kr\">const</span> <span class=\"nx\">shader</span> <span class=\"o\">=</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">ShaderLib</span><span class=\"p\">[</span><span class=\"s2\">\"cube\"</span><span class=\"p\">];</span>\n<span class=\"nx\">shader</span><span class=\"p\">.</span><span class=\"nx\">uniforms</span><span class=\"p\">[</span><span class=\"s2\">\"tCube\"</span><span class=\"p\">].</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">textureCube</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">material</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">ShaderMaterial</span><span class=\"p\">({</span>\n  <span class=\"nx\">fragmentShader</span><span class=\"o\">:</span> <span class=\"nx\">shader</span><span class=\"p\">.</span><span class=\"nx\">fragmentShader</span><span class=\"p\">,</span>\n  <span class=\"nx\">vertexShader</span><span class=\"o\">:</span> <span class=\"nx\">shader</span><span class=\"p\">.</span><span class=\"nx\">vertexShader</span><span class=\"p\">,</span>\n  <span class=\"nx\">uniforms</span><span class=\"o\">:</span> <span class=\"nx\">shader</span><span class=\"p\">.</span><span class=\"nx\">uniforms</span><span class=\"p\">,</span>\n  <span class=\"nx\">depthWrite</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"nx\">side</span><span class=\"o\">:</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">DoubleSide</span>\n<span class=\"p\">});</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">skybox</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">BoxGeometry</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">),</span> <span class=\"nx\">material</span><span class=\"p\">);</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">skybox</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"cubecameraを使う\" class=\"fragment\"></span><a href=\"#cubecamera%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>CubeCameraを使う</h2>\n\n<p>動的な環境マッピングには必須なcamera</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">カメラを用意</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cubeCamera</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">CubeCamera</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">);</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cubeCamera</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<p>毎フレームごとに更新することも忘れずに。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">カメラを更新する</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n  <span class=\"err\">・・・（中略）・・・</span>\n\n  <span class=\"c1\">// 一度sphereを消してCubeMapを更新してから表示する</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sphere</span><span class=\"p\">.</span><span class=\"nx\">visible</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cubeCamera</span><span class=\"p\">.</span><span class=\"nx\">updateCubeMap</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderer</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scene</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sphere</span><span class=\"p\">.</span><span class=\"nx\">visible</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"sphere-torusknotを追加\" class=\"fragment\"></span><a href=\"#sphere-torusknot%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>Sphere, TorusKnotを追加</h2>\n\n<p>envMapにどのように環境を反射するか記述<br>\nsphere -&gt; 動的環境マッピング<br>\ntorusknot -&gt; 静的環境マッピング</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">オブジェクトを追加</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kr\">const</span> <span class=\"nx\">sphereGeometry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">SphereGeometry</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">torusGeometry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">TorusKnotGeometry</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">torusGeometry2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">TorusKnotGeometry</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">dynamicEnvMaterial</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">MeshBasicMaterial</span><span class=\"p\">({</span>\n  <span class=\"nx\">envMap</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cubeCamera</span><span class=\"p\">.</span><span class=\"nx\">renderTarget</span><span class=\"p\">,</span> <span class=\"c1\">// cubeCameraを設定、シーン内の他のオブジェクトも反射</span>\n  <span class=\"nx\">side</span><span class=\"o\">:</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">DoubleSide</span>\n<span class=\"p\">});</span>\n<span class=\"kr\">const</span> <span class=\"nx\">envMaterial</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">MeshBasicMaterial</span><span class=\"p\">({</span>\n  <span class=\"nx\">envMap</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">textureCube</span><span class=\"p\">,</span> <span class=\"c1\">// 作成したcubeMapオブジェクトを設定することで、meshはその環境を反射</span>\n  <span class=\"nx\">side</span><span class=\"o\">:</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">DoubleSide</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sphere</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span><span class=\"nx\">sphereGeometry</span><span class=\"p\">,</span> <span class=\"nx\">dynamicEnvMaterial</span><span class=\"p\">);</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sphere</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">torus</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span><span class=\"nx\">torusGeometry</span><span class=\"p\">,</span> <span class=\"nx\">envMaterial</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">torus2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span><span class=\"nx\">torusGeometry2</span><span class=\"p\">,</span> <span class=\"nx\">envMaterial</span><span class=\"p\">);</span>\n<span class=\"nx\">torus</span><span class=\"p\">.</span><span class=\"nx\">material</span><span class=\"p\">.</span><span class=\"nx\">reflectivity</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">;</span> <span class=\"c1\">// 反射率 (同じマテリアルを適応しているのでtorus2も影響を受けるのに注意)</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">torus</span><span class=\"p\">,</span> <span class=\"nx\">torus2</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<blockquote>\n<p>参考<br>\n<a href=\"https://www.oreilly.co.jp/books/9784873117706/\" rel=\"nofollow\" target=\"_blank\">初めてのThree.js 第2版――WebGLのためのJavaScript 3Dライブラリ</a></p>\n</blockquote>\n",
    "stock_users": []
}, {
    "id": 421204,
    "uuid": "b22b07f44dbf02311d78",
    "user": {
        "id": 23455,
        "url_name": "wukann",
        "profile_image_url": "https://pbs.twimg.com/profile_images/1725762643/kojiro_normal.jpg",
        "following": false
    },
    "title": "TechFeed Live#2 「React vs Angular2」覚書",
    "created_at": "2016-09-08 00:17:58 +0900",
    "updated_at": "2016-09-08 00:17:58 +0900",
    "created_at_in_words": "約15時間",
    "updated_at_in_words": "約15時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "AngularJS",
        "url_name": "angularjs",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/ec867ea63f5f23d3235188dbd48a5195dcc7680e/medium.jpg?1395746077",
        "following": false,
        "versions": []
    }, {
        "name": "reactjs",
        "url_name": "reactjs",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5a70092ac765f1a46e2312814489acffc3100e68/medium.jpg?1422719113",
        "following": true,
        "versions": []
    }, {
        "name": "Angular2",
        "url_name": "angular2",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/64795573f39af62914a991ae6dcc4d55151ef01e/medium.jpg?1449444114",
        "following": false,
        "versions": []
    }],
    "stock_count": 2,
    "comment_count": 0,
    "url": "http://qiita.com/wukann/items/b22b07f44dbf02311d78",
    "created_at_as_seconds": 1473261478,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "[TechFeed Live#2 「React vs Angular2」](http://techfeed.connpass.com/event/38582/)に参加登録したところ、定員オーバーによる抽選落ちからのキャンセル待ち繰り上がりで参加できたので、自分がうといWeb系技術の勉強がてら拝聴してまいりました。RC版のライブラリをものともせずガッツリと使い込んでいらっしゃる方々のアツいトークの中、初めて聞く単語をググりながら何とか自分なりに情報を拾えるだけ拾ってきました。\n\n以下、覚書です。不勉強なため、間違い(解釈違い)な点もあると思いますが。。。\n\n# React\n\n- Viewのライブラリ\n- 状態・イベントの管理をするデザインパターンがある(オブザーバルパターン、Flux, Redux)\n    - これを組み合わせてもAngularエコシステム規模にはならない(足りない)\n- 初期学習コストが高い\n    - 中級者になるまでの敷居が高い\n- Javascript上級者が好む\n    - 好きにライブラリを組み合わせられる\n\n# Angular2\n\n- \"One Framework\"、フルスタック\n- RxJSとの組み合わせもあり？\n- DI機能あり。ReactにはDIの考え方はない\n    - Angular2をReduxと組み合わせるとこの旨味がなくなる\n    - テストしやすい設計\n- RCがRCじゃない。。。\n    - RC4 > RC5 > RC6, とAPIの変更が激しい\n    - 早ければ今月末にFinallyが出る\n- minify前提(サイズが大きい)\n\n\n# 比較観点から\n\n## 開発言語\n\n- ReactはJSXがないとつらい\n- Angular2はTypeScript, ReactはBabel、というすみ分けはできている感じがする\n    - 開発者の慣れ、FW開発言語など\n- どちらもDOMを直接いじらない\n- React, Angular2問わず、開発規模が大きければTypeScriptが便利(静的型)。\n    - Javascriptを生で書くことはない。何らかのコンパイルは必須。\n\n# ビルドツール\n\n- webpack,...\n- どちらも違いはない\n\n# ルーティング\n\n- Angular2のルーティング機能はよくできてきた\n    - ここ2-3ヶ月くらいの話。その前はひどかった\n- 現状、汎用ルーティングライブラリのデファクトスタンダードというものがない\n\n# テンプレート\n\n- Angular2はhtml寄り。\n- ReactのJSXは文字列なのでコンパイル時チェックができない\n\n# XSS対策\n\n- Angular2の圧勝\n    - ReactはURLを注入する場合など、開発者がちゃんとチェックする必要あり\n    - Angular2は厳しいほどチェックしてくれる\n\n# ツール\n\n- WebStorm(IDE)\n    - React, Angular双方に力を入れている\n        - 固有記法のシンタックスハイライトなど\n\n# テスト\n\n- Angularはテストフレームワークが内包されている\n- Reactはコンポーネントに状態を持たせないスタイルなのでテストしやすい\n    - コンポーネントが関数ベース\n    - DOMを管理するでかいシングルトンオブジェクトがある\n    - Angularはコンポーネントにステートを持たせる\n\n# パフォーマンス\n\n- Angular2になってからReactと同等の速度になった\n    - Angular1は遅い。パフォーマンスが出ない場合はAngular1のせいにできた\n\n# サーバサイドレンダリング\n\n- どちらもパフォーマンスは変わらない？\n\n# その他\n\n- SWAGGER\n    - RESTFul APIを記述するための仕様\n    - yaml/jsonからコード生成\n",
    "body": "<p><a href=\"http://techfeed.connpass.com/event/38582/\" rel=\"nofollow\" target=\"_blank\">TechFeed Live#2 「React vs Angular2」</a>に参加登録したところ、定員オーバーによる抽選落ちからのキャンセル待ち繰り上がりで参加できたので、自分がうといWeb系技術の勉強がてら拝聴してまいりました。RC版のライブラリをものともせずガッツリと使い込んでいらっしゃる方々のアツいトークの中、初めて聞く単語をググりながら何とか自分なりに情報を拾えるだけ拾ってきました。</p>\n\n<p>以下、覚書です。不勉強なため、間違い(解釈違い)な点もあると思いますが。。。</p>\n\n<h1>\n<span id=\"react\" class=\"fragment\"></span><a href=\"#react\"><i class=\"fa fa-link\"></i></a>React</h1>\n\n<ul>\n<li>Viewのライブラリ</li>\n<li>状態・イベントの管理をするデザインパターンがある(オブザーバルパターン、Flux, Redux)\n\n<ul>\n<li>これを組み合わせてもAngularエコシステム規模にはならない(足りない)</li>\n</ul>\n</li>\n<li>初期学習コストが高い\n\n<ul>\n<li>中級者になるまでの敷居が高い</li>\n</ul>\n</li>\n<li>Javascript上級者が好む\n\n<ul>\n<li>好きにライブラリを組み合わせられる</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"angular2\" class=\"fragment\"></span><a href=\"#angular2\"><i class=\"fa fa-link\"></i></a>Angular2</h1>\n\n<ul>\n<li>\"One Framework\"、フルスタック</li>\n<li>RxJSとの組み合わせもあり？</li>\n<li>DI機能あり。ReactにはDIの考え方はない\n\n<ul>\n<li>Angular2をReduxと組み合わせるとこの旨味がなくなる</li>\n<li>テストしやすい設計</li>\n</ul>\n</li>\n<li>RCがRCじゃない。。。\n\n<ul>\n<li>RC4 &gt; RC5 &gt; RC6, とAPIの変更が激しい</li>\n<li>早ければ今月末にFinallyが出る</li>\n</ul>\n</li>\n<li>minify前提(サイズが大きい)</li>\n</ul>\n\n<h1>\n<span id=\"比較観点から\" class=\"fragment\"></span><a href=\"#%E6%AF%94%E8%BC%83%E8%A6%B3%E7%82%B9%E3%81%8B%E3%82%89\"><i class=\"fa fa-link\"></i></a>比較観点から</h1>\n\n<h2>\n<span id=\"開発言語\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E\"><i class=\"fa fa-link\"></i></a>開発言語</h2>\n\n<ul>\n<li>ReactはJSXがないとつらい</li>\n<li>Angular2はTypeScript, ReactはBabel、というすみ分けはできている感じがする\n\n<ul>\n<li>開発者の慣れ、FW開発言語など</li>\n</ul>\n</li>\n<li>どちらもDOMを直接いじらない</li>\n<li>React, Angular2問わず、開発規模が大きければTypeScriptが便利(静的型)。\n\n<ul>\n<li>Javascriptを生で書くことはない。何らかのコンパイルは必須。</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"ビルドツール\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ビルドツール</h1>\n\n<ul>\n<li>webpack,...</li>\n<li>どちらも違いはない</li>\n</ul>\n\n<h1>\n<span id=\"ルーティング\" class=\"fragment\"></span><a href=\"#%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>ルーティング</h1>\n\n<ul>\n<li>Angular2のルーティング機能はよくできてきた\n\n<ul>\n<li>ここ2-3ヶ月くらいの話。その前はひどかった</li>\n</ul>\n</li>\n<li>現状、汎用ルーティングライブラリのデファクトスタンダードというものがない</li>\n</ul>\n\n<h1>\n<span id=\"テンプレート\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88\"><i class=\"fa fa-link\"></i></a>テンプレート</h1>\n\n<ul>\n<li>Angular2はhtml寄り。</li>\n<li>ReactのJSXは文字列なのでコンパイル時チェックができない</li>\n</ul>\n\n<h1>\n<span id=\"xss対策\" class=\"fragment\"></span><a href=\"#xss%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>XSS対策</h1>\n\n<ul>\n<li>Angular2の圧勝\n\n<ul>\n<li>ReactはURLを注入する場合など、開発者がちゃんとチェックする必要あり</li>\n<li>Angular2は厳しいほどチェックしてくれる</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"ツール\" class=\"fragment\"></span><a href=\"#%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ツール</h1>\n\n<ul>\n<li>WebStorm(IDE)\n\n<ul>\n<li>React, Angular双方に力を入れている\n\n<ul>\n<li>固有記法のシンタックスハイライトなど</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"テスト\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>テスト</h1>\n\n<ul>\n<li>Angularはテストフレームワークが内包されている</li>\n<li>Reactはコンポーネントに状態を持たせないスタイルなのでテストしやすい\n\n<ul>\n<li>コンポーネントが関数ベース</li>\n<li>DOMを管理するでかいシングルトンオブジェクトがある</li>\n<li>Angularはコンポーネントにステートを持たせる</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"パフォーマンス\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>パフォーマンス</h1>\n\n<ul>\n<li>Angular2になってからReactと同等の速度になった\n\n<ul>\n<li>Angular1は遅い。パフォーマンスが出ない場合はAngular1のせいにできた</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"サーバサイドレンダリング\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%82%B5%E3%82%A4%E3%83%89%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>サーバサイドレンダリング</h1>\n\n<ul>\n<li>どちらもパフォーマンスは変わらない？</li>\n</ul>\n\n<h1>\n<span id=\"その他\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\"><i class=\"fa fa-link\"></i></a>その他</h1>\n\n<ul>\n<li>SWAGGER\n\n<ul>\n<li>RESTFul APIを記述するための仕様</li>\n<li>yaml/jsonからコード生成</li>\n</ul>\n</li>\n</ul>\n",
    "stock_users": [
        "uraxy",
        "gonjitti"
    ]
}, {
    "id": 421198,
    "uuid": "360423c2bc706313cf0c",
    "user": {
        "id": 53116,
        "url_name": "unasaka",
        "profile_image_url": "https://avatars.githubusercontent.com/u/5753170?v=2",
        "following": false
    },
    "title": "FactoryGirlの遅延評価でハマったメモ",
    "created_at": "2016-09-08 00:04:38 +0900",
    "updated_at": "2016-09-08 00:38:50 +0900",
    "created_at_in_words": "約15時間",
    "updated_at_in_words": "約15時間",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }, {
        "name": "FactoryGirl",
        "url_name": "factorygirl",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 1,
    "comment_count": 0,
    "url": "http://qiita.com/unasaka/items/360423c2bc706313cf0c",
    "created_at_as_seconds": 1473260678,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "\n都道府県ランキングみたいなものを持っているモデルのファクトリでハマったのでメモ。\n\n以下のように都道府県ランキング属性の生成を、配列からの`shift`で書いていたら、48回目の呼び出しから`Field 'ranking' doesn't have a default value`と落ちるようになった。\n\n```ruby\nFactoryGirl.define do\n  nums = (1..47).to_a.shuffle\n  factory :hoge do\n    ranking { nums.shift }\n  end\nend\n```\n\nFactoryGirlの属性にブロックを渡すと動的に評価される。\nどうやらファクトリがロードされた時に確保されるであろう`nums`をファクトリが保持していて、48回目以降は空配列からの`shift`になっている模様。\nsequenceの番号保持するのと同じイメージ？\n\nブロックを外すと、テストは落ちないけど、`nums`が同じ内容を返すようになった。これはまあ同じ配列から`shift`しているから。\n\nこの挙動をちゃんと調べようと思ったけどコード読むパワーが無かった。\n（多分このへん？→https://github.com/thoughtbot/factory_girl/blob/master/lib/factory_girl/attribute/dynamic.rb)\n\n\n結果根本的な解決にはなっていないけど、uniqueは気にしないことにして`Random.rand(1..47)`にした。\nuniqueな乱数入れるにはどうしたものか...\n",
    "body": "<p>都道府県ランキングみたいなものを持っているモデルのファクトリでハマったのでメモ。</p>\n\n<p>以下のように都道府県ランキング属性の生成を、配列からの<code>shift</code>で書いていたら、48回目の呼び出しから<code>Field 'ranking' doesn't have a default value</code>と落ちるようになった。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre>\n<span class=\"no\">FactoryGirl</span><span class=\"o\">.</span><span class=\"n\">define</span> <span class=\"k\">do</span>\n  <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">47</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span><span class=\"o\">.</span><span class=\"n\">shuffle</span>\n  <span class=\"n\">factory</span> <span class=\"ss\">:hoge</span> <span class=\"k\">do</span>\n    <span class=\"n\">ranking</span> <span class=\"p\">{</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">shift</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div></div>\n\n<p>FactoryGirlの属性にブロックを渡すと動的に評価される。<br>\nどうやらファクトリがロードされた時に確保されるであろう<code>nums</code>をファクトリが保持していて、48回目以降は空配列からの<code>shift</code>になっている模様。<br>\nsequenceの番号保持するのと同じイメージ？</p>\n\n<p>ブロックを外すと、テストは落ちないけど、<code>nums</code>が同じ内容を返すようになった。これはまあ同じ配列から<code>shift</code>しているから。</p>\n\n<p>この挙動をちゃんと調べようと思ったけどコード読むパワーが無かった。<br>\n（多分このへん？→<a href=\"https://github.com/thoughtbot/factory_girl/blob/master/lib/factory_girl/attribute/dynamic.rb\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://github.com/thoughtbot/factory_girl/blob/master/lib/factory_girl/attribute/dynamic.rb</a>)</p>\n\n<p>結果根本的な解決にはなっていないけど、uniqueは気にしないことにして<code>Random.rand(1..47)</code>にした。<br>\nuniqueな乱数入れるにはどうしたものか...</p>\n",
    "stock_users": [
        "YumaInaura"
    ]
}, {
    "id": 421195,
    "uuid": "3d0135a2e5ca200472f0",
    "user": {
        "id": 72774,
        "url_name": "ny_an",
        "profile_image_url": "https://pbs.twimg.com/profile_images/553040924066852864/xhQvMUd6_normal.jpeg",
        "following": false
    },
    "title": "【高速化】CSSをPHP化、画像をBASE64化してリクエスト数を減らしつつキャッシュ利用",
    "created_at": "2016-09-07 23:57:13 +0900",
    "updated_at": "2016-09-08 00:01:18 +0900",
    "created_at_in_words": "約15時間",
    "updated_at_in_words": "約15時間",
    "tags": [{
        "name": "PHP",
        "url_name": "php",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f176a298596ff5310d42e20354b966e4a1e1083/medium.jpg?1465035180",
        "following": false,
        "versions": []
    }, {
        "name": "CSS",
        "url_name": "css",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/b4438ce0a78810256791a266e87c74a76b555de1/medium.jpg?1419699326",
        "following": true,
        "versions": []
    }, {
        "name": "高速化",
        "url_name": "%e9%ab%98%e9%80%9f%e5%8c%96",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 2,
    "comment_count": 0,
    "url": "http://qiita.com/ny_an/items/3d0135a2e5ca200472f0",
    "created_at_as_seconds": 1473260233,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "#概要\n・PHPファイルをCSSとして読み込み\n・CSS内部で画像をBASE64エンコードして変数化\n・変数化した画像をCSSで描写\n・拡張子がPHPファイルとなったCSSをキャッシュ化・圧縮転送\n\n\n#最初はHTMLに埋め込みしようと思ったけど\nメリット：\n・リクエスト数が減る\n\nデメリット：\n・通信量は期待するほど変わらない\n※BASE64エンコードで35%増、圧縮で30%削減、最終的にトントン（らしい）\n・キャッシュされない\n\n画像がキャッシュされないのはよろしくない。\n\n#解決策\nキャッシュされないデメリットは\nCSSに画像を書き込むことで対処。\nCSSはキャッシュされるようにしておけば安心。\n\n#実例\n\n```index.php\n<!-- PHPファイルをCSSとして読み込む -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css.php\" /> \n\n~~\n\n<!-- 画像表示領域 -->\n<figure id=\"profile\">\n</figure>\n\n```\n\n```css.php\n/* リクエストヘッダー */\n<?php header('Content-Type: text/css; charset=utf-8'); ?>\n@charset \"UTF-8\";\n\n/* BASE64化 */\n<?php $img_profile_png = base64_encode(file_get_contents('profile.png')); ?>\n\n/* 画像出力 */\n#profile_img{\n    background-image: url('data:image/png;base64,<?= $img_profile_png?>');\n}\n```\n\n```apache:.htaccess\n# 拡張子がPHPでもキャッシュさせる（個別表記）\n<Files ~ \".(php)$\">\n\tHeader set Cache-Control \"max-age=2592000, public\"\n</Files>\n\n# CSSファイルの圧縮（個別表記）\n<ifmodule mod_deflate.c>\n AddOutputFilterByType DEFLATE text/css \n </ifmodule>\n```\n\n",
    "body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>・PHPファイルをCSSとして読み込み<br>\n・CSS内部で画像をBASE64エンコードして変数化<br>\n・変数化した画像をCSSで描写<br>\n・拡張子がPHPファイルとなったCSSをキャッシュ化・圧縮転送</p>\n\n<h1>\n<span id=\"最初はhtmlに埋め込みしようと思ったけど\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AFhtml%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%91%E3%81%A9\"><i class=\"fa fa-link\"></i></a>最初はHTMLに埋め込みしようと思ったけど</h1>\n\n<p>メリット：<br>\n・リクエスト数が減る</p>\n\n<p>デメリット：<br>\n・通信量は期待するほど変わらない<br>\n※BASE64エンコードで35%増、圧縮で30%削減、最終的にトントン（らしい）<br>\n・キャッシュされない</p>\n\n<p>画像がキャッシュされないのはよろしくない。</p>\n\n<h1>\n<span id=\"解決策\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"><i class=\"fa fa-link\"></i></a>解決策</h1>\n\n<p>キャッシュされないデメリットは<br>\nCSSに画像を書き込むことで対処。<br>\nCSSはキャッシュされるようにしておけば安心。</p>\n\n<h1>\n<span id=\"実例\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>実例</h1>\n\n<div class=\"code-frame\" data-lang=\"php\">\n<div class=\"code-lang\"><span class=\"bold\">index.php</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"o\">&lt;!--</span> <span class=\"nx\">PHPファイルをCSSとして読み込む</span> <span class=\"o\">--&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">link</span> <span class=\"nx\">rel</span><span class=\"o\">=</span><span class=\"s2\">\"stylesheet\"</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"text/css\"</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"css.php\"</span> <span class=\"o\">/&gt;</span> \n\n<span class=\"o\">~~</span>\n\n<span class=\"o\">&lt;!--</span> <span class=\"nx\">画像表示領域</span> <span class=\"o\">--&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">figure</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"profile\"</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"nx\">figure</span><span class=\"o\">&gt;</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"php\">\n<div class=\"code-lang\"><span class=\"bold\">css.php</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"x\">/* リクエストヘッダー */</span>\n<span class=\"cp\">&lt;?php</span> <span class=\"nb\">header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Type: text/css; charset=utf-8'</span><span class=\"p\">);</span> <span class=\"cp\">?&gt;</span><span class=\"x\"></span>\n<span class=\"x\">@charset \"UTF-8\";</span>\n\n<span class=\"x\">/* BASE64化 */</span>\n<span class=\"cp\">&lt;?php</span> <span class=\"nv\">$img_profile_png</span> <span class=\"o\">=</span> <span class=\"nb\">base64_encode</span><span class=\"p\">(</span><span class=\"nb\">file_get_contents</span><span class=\"p\">(</span><span class=\"s1\">'profile.png'</span><span class=\"p\">));</span> <span class=\"cp\">?&gt;</span><span class=\"x\"></span>\n\n<span class=\"x\">/* 画像出力 */</span>\n<span class=\"x\">#profile_img{</span>\n<span class=\"x\">    background-image: url('data:image/png;base64,</span><span class=\"cp\">&lt;?</span><span class=\"o\">=</span> <span class=\"nv\">$img_profile_png</span><span class=\"cp\">?&gt;</span><span class=\"x\">');</span>\n<span class=\"x\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"apache\">\n<div class=\"code-lang\"><span class=\"bold\">.htaccess</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c\"># 拡張子がPHPでもキャッシュさせる（個別表記）</span>\n<span class=\"nt\">&lt;Files</span> <span class=\"s\">~ \".(php)$\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nb\">Header</span> set Cache-Control <span class=\"s2\">\"max-age=2592000, public\"</span>\n<span class=\"nt\">&lt;/Files&gt;</span>\n\n<span class=\"c\"># CSSファイルの圧縮（個別表記）</span>\n<span class=\"nt\">&lt;ifmodule</span> <span class=\"s\">mod_deflate.c</span><span class=\"nt\">&gt;</span>\n <span class=\"nb\">AddOutputFilterByType</span> DEFLATE text/css \n <span class=\"nt\">&lt;/ifmodule&gt;</span>\n</pre></div>\n</div>\n",
    "stock_users": [
        "n_slender",
        "yizumi1012xxx"
    ]
}, {
    "id": 421178,
    "uuid": "4dcbcda876b801520775",
    "user": {
        "id": 39361,
        "url_name": "teknocat",
        "profile_image_url": "https://pbs.twimg.com/profile_images/1093284065/3743805_normal.jpg",
        "following": false
    },
    "title": "ANSIエスケープシーケンス出力をHTMLに変換したい",
    "created_at": "2016-09-07 22:35:25 +0900",
    "updated_at": "2016-09-08 09:45:48 +0900",
    "created_at_in_words": "約17時間",
    "updated_at_in_words": "約6時間",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }, {
        "name": "CentOS",
        "url_name": "centos",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e4868efd52d968390d2fba99ac5da996a3aa02ea/medium.jpg?1445616574",
        "following": false,
        "versions": []
    }, {
        "name": "Ubuntu",
        "url_name": "ubuntu",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/16292ce7a37e2133dc34acef293af06f998c8da8/medium.jpg?1387917339",
        "following": false,
        "versions": []
    }, {
        "name": "Terminal",
        "url_name": "terminal",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0da1f7d0495646929cb2886f2c31e3fa2c122cdc/medium.jpg?1364839541",
        "following": false,
        "versions": []
    }],
    "stock_count": 3,
    "comment_count": 0,
    "url": "http://qiita.com/teknocat/items/4dcbcda876b801520775",
    "created_at_as_seconds": 1473255325,
    "tweet": true,
    "gist_url": "https://gist.github.com/df24c81d2b5e60e0adff6daa3ab01592",
    "private": false,
    "stocked": false,
    "raw_body": "ふと、Rails のログなど ANSI エスケープシーケンス使って吐かれたテキストを HTML に変換したくなったので調べてみたら、ansifilter なるものがあるらしい。\n\nhttp://www.andre-simon.de/doku/ansifilter/en/ansifilter.php\n\nCentOS 7 だと yum でインストール出来た(epel リポジトリ)。\n\nubuntu 16.04 LTS だと apt-get でインストール出来ないので、ソースを取得して、make、適当な所にコピー(もしくは make install で /usr/bin にインストール)。\n\n~~~\n$ wget http://www.andre-simon.de/zip/ansifilter-2.0.tar.bz\n$ tar jxf ansifilter-2.0.tar.bz2\n$ cd ansifilter-2.0/\n$ make\n$ cd src\n$ cp ansifilter ~/bin\n~~~\n\n例えば、Rails の development.log を HTML に変換したい場合は、以下の通り。\n\n~~~\n$ ansifilter development.log -H > out.html\n~~~\n",
    "body": "<p>ふと、Rails のログなど ANSI エスケープシーケンス使って吐かれたテキストを HTML に変換したくなったので調べてみたら、ansifilter なるものがあるらしい。</p>\n\n<p><a href=\"http://www.andre-simon.de/doku/ansifilter/en/ansifilter.php\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://www.andre-simon.de/doku/ansifilter/en/ansifilter.php</a></p>\n\n<p>CentOS 7 だと yum でインストール出来た(epel リポジトリ)。</p>\n\n<p>ubuntu 16.04 LTS だと apt-get でインストール出来ないので、ソースを取得して、make、適当な所にコピー(もしくは make install で /usr/bin にインストール)。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ wget http://www.andre-simon.de/zip/ansifilter-2.0.tar.bz\n$ tar jxf ansifilter-2.0.tar.bz2\n$ cd ansifilter-2.0/\n$ make\n$ cd src\n$ cp ansifilter ~/bin\n</pre></div></div>\n\n<p>例えば、Rails の development.log を HTML に変換したい場合は、以下の通り。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ ansifilter development.log -H &gt; out.html\n</pre></div></div>\n",
    "stock_users": [
        "tukiyo3",
        "7of9",
        "jkr_2255"
    ]
}, {
    "id": 421117,
    "uuid": "f5f4cea0d7c824677ba3",
    "user": {
        "id": 106949,
        "url_name": "srai0628",
        "profile_image_url": "https://avatars.githubusercontent.com/u/1623093?v=3",
        "following": false
    },
    "title": "Riot.jsのコンポーネント外からデータを渡す方法",
    "created_at": "2016-09-07 17:59:08 +0900",
    "updated_at": "2016-09-07 17:59:08 +0900",
    "created_at_in_words": "約21時間",
    "updated_at_in_words": "約21時間",
    "tags": [{
        "name": "riot",
        "url_name": "riot",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/247db8eee30fb2804479051b98b81da9c40546a6/medium.jpg?1422919923",
        "following": true,
        "versions": []
    }, {
        "name": "riot.js",
        "url_name": "riot.js",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/02210f4ccd33aa67a2f78fdf751800c47a2c55ea/medium.jpg?1468193503",
        "following": true,
        "versions": []
    }],
    "stock_count": 5,
    "comment_count": 0,
    "url": "http://qiita.com/srai0628/items/f5f4cea0d7c824677ba3",
    "created_at_as_seconds": 1473238748,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "# 背景\n\n現在のプロジェクトではjQueryを使ってDOM操作しているけれども、DOM操作だけはRiot.jsに置き換えたい。\nそのようなときに、Riot.jsのコンポーネントと既存の処理をどのように連携させたらよいのか...\n\nということで、Riot.jsの外からRiot.jsのコンポーネントに処理を移譲する方法を調べていました。\n\n# 解決策の概要\n\nRiot.jｓを使っていない既存の処理から、Riot.jsのコンポーネントにデータを流し込んで表示させる場合、[オブザーバブル](http://riotjs.com/ja/api/observable/)という機構をつかって実現できます。\n\nコンポーネント間の通信でも、この方法を利用します。\n[【Riot.js】タグ間で動作を連動させる](http://qiita.com/iwamatsu0430/items/49ea5ad14c631f323d22)というエントリを参考にさせていただきました。\n\n# 実装サンプル\n\nサンプルとして、jQueryでajax通信した後、JSONで受け取った結果を表示するコンポーネントを作るとします。\n\nここでは、result-listというコンポーネントを生成しています。\nオブザーバブルオブジェクトを生成して、コンポーネントのマウント時に引き渡します。\n\n```\nvar observer = riot.observable();\nriot.mount('result-list', {observer:observer});\n```\n\nresult-listは以下のように定義されています。\nマウント時の第二引数の値には、optsという変数でアクセスできるようになっています。\n\nマウント時に引き渡されたオブザーバブルオブジェクトに対して、リスナーを登録します。\n\n```\n<script type=\"riot/tag\">\n  <result-list>\n    <ul>\n      <li>{ title }</li>\n      <li>{ message }</li>\n    </ul>\n\n    var self = this\n\n    // mount時にobserverを受け取る\n    self.observer = opts.observer\n\n    // 外部からobserver.trigger('result-list:refresh', result)を呼びだされたら発動\n    self.observer.on('result-list:refresh', function(result) {\n      self.title = result['title']\n      self.message = result['message']\n      self.update()\n    })\n  </result-list>\n</script>\n```\n\n外からデータを反映したいタイミングでoberver.triggerを呼び出します。\n今回のサンプルの場合は、ajax通信後のcallbackで呼び出してみます。\n\n```\n$.getJSON(url, data, function(json){\n  observer.trigger('result-list:refresh', json);\n});\n```\n\nこの方法で、Riot.jsのコンポーネント外からデータを流し込むことができました。\n\nReactJS等の導入になかなか踏みきれないけど、jQueryでのDOM操作はいい加減やめたい。\nそのような方にとって参考になればと思います。\n",
    "body": "\n<h1>\n<span id=\"背景\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>背景</h1>\n\n<p>現在のプロジェクトではjQueryを使ってDOM操作しているけれども、DOM操作だけはRiot.jsに置き換えたい。<br>\nそのようなときに、Riot.jsのコンポーネントと既存の処理をどのように連携させたらよいのか...</p>\n\n<p>ということで、Riot.jsの外からRiot.jsのコンポーネントに処理を移譲する方法を調べていました。</p>\n\n<h1>\n<span id=\"解決策の概要\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96%E3%81%AE%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>解決策の概要</h1>\n\n<p>Riot.jｓを使っていない既存の処理から、Riot.jsのコンポーネントにデータを流し込んで表示させる場合、<a href=\"http://riotjs.com/ja/api/observable/\" rel=\"nofollow\" target=\"_blank\">オブザーバブル</a>という機構をつかって実現できます。</p>\n\n<p>コンポーネント間の通信でも、この方法を利用します。<br>\n<a href=\"http://qiita.com/iwamatsu0430/items/49ea5ad14c631f323d22\" id=\"reference-ad89018febd77097a766\">【Riot.js】タグ間で動作を連動させる</a>というエントリを参考にさせていただきました。</p>\n\n<h1>\n<span id=\"実装サンプル\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>実装サンプル</h1>\n\n<p>サンプルとして、jQueryでajax通信した後、JSONで受け取った結果を表示するコンポーネントを作るとします。</p>\n\n<p>ここでは、result-listというコンポーネントを生成しています。<br>\nオブザーバブルオブジェクトを生成して、コンポーネントのマウント時に引き渡します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nvar observer = riot.observable();\nriot.mount('result-list', {observer:observer});\n</pre></div></div>\n\n<p>result-listは以下のように定義されています。<br>\nマウント時の第二引数の値には、optsという変数でアクセスできるようになっています。</p>\n\n<p>マウント時に引き渡されたオブザーバブルオブジェクトに対して、リスナーを登録します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n&lt;script type=\"riot/tag\"&gt;\n  &lt;result-list&gt;\n    &lt;ul&gt;\n      &lt;li&gt;{ title }&lt;/li&gt;\n      &lt;li&gt;{ message }&lt;/li&gt;\n    &lt;/ul&gt;\n\n    var self = this\n\n    // mount時にobserverを受け取る\n    self.observer = opts.observer\n\n    // 外部からobserver.trigger('result-list:refresh', result)を呼びだされたら発動\n    self.observer.on('result-list:refresh', function(result) {\n      self.title = result['title']\n      self.message = result['message']\n      self.update()\n    })\n  &lt;/result-list&gt;\n&lt;/script&gt;\n</pre></div></div>\n\n<p>外からデータを反映したいタイミングでoberver.triggerを呼び出します。<br>\n今回のサンプルの場合は、ajax通信後のcallbackで呼び出してみます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$.getJSON(url, data, function(json){\n  observer.trigger('result-list:refresh', json);\n});\n</pre></div></div>\n\n<p>この方法で、Riot.jsのコンポーネント外からデータを流し込むことができました。</p>\n\n<p>ReactJS等の導入になかなか踏みきれないけど、jQueryでのDOM操作はいい加減やめたい。<br>\nそのような方にとって参考になればと思います。</p>\n",
    "stock_users": [
        "kamise",
        "hyakuson",
        "mercy298",
        "baobabx",
        "siestadesign"
    ]
}, {
    "id": 421100,
    "uuid": "d5657fef2efe03bf03a1",
    "user": {
        "id": 889,
        "url_name": "suin",
        "profile_image_url": "https://avatars.githubusercontent.com/u/855338?",
        "following": false
    },
    "title": "Railsのアセット関連のログを出さないようにしたい",
    "created_at": "2016-09-07 17:33:55 +0900",
    "updated_at": "2016-09-07 17:33:55 +0900",
    "created_at_in_words": "約22時間",
    "updated_at_in_words": "約22時間",
    "tags": [{
        "name": "Rails",
        "url_name": "rails",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5310a6d3a8555d87a7060deec2c9e128bf3b3372/medium.jpg?1364838150",
        "following": true,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 2,
    "url": "http://qiita.com/suin/items/d5657fef2efe03bf03a1",
    "created_at_as_seconds": 1473237235,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "Rails 4ではGemfileに下記を追加:\n\n```rb:Gemfile\ngem 'quiet_assets', group: :development\n```\n\nRails 5では設定を1行追加する:\n\n```rb:config/environments/development.rb\n  config.assets.quiet = true\n```\n\n参考: [Railsの開発環境:1行でassetsのログを除外にする方法](https://suin.io/550)\n",
    "body": "<p>Rails 4ではGemfileに下記を追加:</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">Gemfile</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"n\">gem</span> <span class=\"s1\">'quiet_assets'</span><span class=\"p\">,</span> <span class=\"ss\">group</span><span class=\"p\">:</span> <span class=\"ss\">:development</span>\n</pre></div>\n</div>\n\n<p>Rails 5では設定を1行追加する:</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">config/environments/development.rb</span></div>\n<div class=\"highlight\"><pre>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">quiet</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n</pre></div>\n</div>\n\n<p>参考: <a href=\"https://suin.io/550\" rel=\"nofollow\" target=\"_blank\">Railsの開発環境:1行でassetsのログを除外にする方法</a></p>\n",
    "stock_users": []
}, {
    "id": 421069,
    "uuid": "87ab9821e01b3caea61b",
    "user": {
        "id": 131565,
        "url_name": "ruby_kumagoro",
        "profile_image_url": "https://secure.gravatar.com/avatar/923ab7fb21929e6c23d31e3c6ebda69c",
        "following": false
    },
    "title": "コーディング規約のBEMを現場で使いやすく改良する",
    "created_at": "2016-09-07 17:08:50 +0900",
    "updated_at": "2016-09-07 17:54:40 +0900",
    "created_at_in_words": "約22時間",
    "updated_at_in_words": "約21時間",
    "tags": [{
        "name": "CSS",
        "url_name": "css",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/b4438ce0a78810256791a266e87c74a76b555de1/medium.jpg?1419699326",
        "following": true,
        "versions": []
    }, {
        "name": "bem",
        "url_name": "bem",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/ruby_kumagoro/items/87ab9821e01b3caea61b",
    "created_at_as_seconds": 1473235730,
    "tweet": true,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "## BEMの目的と改良の目的\n\n- 標準規約でコーディングすることにより納品物のクオリティを上げる\n- ルール統一によりチーム間連携しやすくする\n- コーディング時にルールで悩まないようにする\n- 標準のBEMは冗長に感じるのでミスが少なく時間のかからない手法に改良する\n\n## 標準的なBEMのルール\n\n### Block（ブロック）\n\n```css\n.form {}\n.header-nav {}\n```\n\n### Element（エレメント）\n\n```css\n.form__btn {}\n.header-nav__item {}\n.header-nav__item_link {}\n```\n\n### Modifier（モディファイア）\n\n```css\n.form__btn--state_hover {}\n```\n\n### CSSセレクタにタグ名を書かない\n\n#### NG\n\n```html\n<style>\n\t.user-list {}\n\t.user-list > li {}\n</style>\n<ul class=\"user-list\">\n\t<li>name1</li>\n\t<li>name2</li>\n</ul>\n```\n\n#### OK\n\n```html\n<style>\n\t.user-list {}\n\t.user-list__item {}\n</style>\n<ul class=\"user-list\">\n\t<li class=\"user-list__item\">name1</li>\n\t<li class=\"user-list__item\">name2</li>\n</ul>\n```\n\n## 標準的なBEMの問題点\n\n1. _を2重に書く必要があり、二つ書いたつもりという表記ミスを起こす可能性がある\n2. エレメントは_を2重、モデファイアは-を2重に書くため表記が長くなり、コーディングにも時間がかかる\n3. CSSセレクタにタグ名を書いてはいけないのでコーディングに時間がかかる\n\n## 使いやすく改良したBEM\n\n> 一貫した規則と機械可読性さえあれば各区切り文字は変えたり消したりしても良いことになっている\n\nとあるので、ルールに出来る限り沿って現場で使いやすく改良を試みる。\n\n### 【改良】Block（ブロック）\n\n```css\n.form {}\n.headerNav {}\n```\n\n### 【改良】Element（エレメント）※改良後\n\n```css\n.form_btn {}\n.headerNav_item {}\n.headerNav_itemLink {}\n```\n\n### 【改良】Modifier（モディファイア）※改良後\n\n```css\n.form_btn-stateHover {}\n```\n\n### 【改良】CSSセレクタにタグ名を書いて良いことにする\n\nulの子セレクタはliに決まっているし、さらに中にブロック、エレメントが入らないと分かっている場合はタグ名を入れて良いルールに変更  \nただ、このルールは規約違反なので、しっかりとチーム内で共有する必要がある。\n\n```html\n<style>\n\t.userList {}\n\t.userList > li {}\n</style>\n<ul class=\"userList\">\n\t<li>name1</li>\n\t<li>name2</li>\n</ul>\n```\n\n### 【改良】IDも同様のルール\n\n```html\n<style>\n\t#searchForm {}\n\t#searchForm .serchForm_btn {}\n</style>\n<form id=\"searchForm\">\n\t<input type=\"submit\" class=\"serchForm_btn\">\n</form>\n```\n\n### 【改良】classのセレクタは一つに留める\n\n#### NG\n\n```html\n<style>\n  .headerNav {}\n  .headerNav .headerNav_item {}\n</style>\n```\n\n#### OK\n\n```html\n<style>\n  .headerNav {}\n  .headerNav_item {}\n</style>\n```\n\n### 【改良】ファイル名も規約と統一する\n\n- ブロック名とエレメント名のみ書けばOK\n- ブロック名とエレメント名の後は_をいくつ挟んでもOK\n\n```text\n「class=\"ブロック名_エレメント名\"」 → 「ブロック名_エレメント名_画像名.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn_submit.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn_submit_off.gif」\n```\n\n- 画像名を書く必要のない場合は省略も可\n\n```text\n「class=\"ブロック名_エレメント名\"」 → 「ブロック名_エレメント名.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn.gif」\n```\n\n## 参考\n\n- [こんなHTMLとCSSのコーディング規約で書きたい](http://qiita.com/pugiemonn/items/964203782e1fcb3d02c3)\n- [実践 めんどうくさくない BEM](http://tsmd.hateblo.jp/entry/2013/12/12/004059)\n- [BEMを参考にしたCSS設計](http://qiita.com/mrd-takahashi/items/07dc3b4bad027daa2884)\n",
    "body": "\n<h2>\n<span id=\"bemの目的と改良の目的\" class=\"fragment\"></span><a href=\"#bem%E3%81%AE%E7%9B%AE%E7%9A%84%E3%81%A8%E6%94%B9%E8%89%AF%E3%81%AE%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>BEMの目的と改良の目的</h2>\n\n<ul>\n<li>標準規約でコーディングすることにより納品物のクオリティを上げる</li>\n<li>ルール統一によりチーム間連携しやすくする</li>\n<li>コーディング時にルールで悩まないようにする</li>\n<li>標準のBEMは冗長に感じるのでミスが少なく時間のかからない手法に改良する</li>\n</ul>\n\n<h2>\n<span id=\"標準的なbemのルール\" class=\"fragment\"></span><a href=\"#%E6%A8%99%E6%BA%96%E7%9A%84%E3%81%AAbem%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>標準的なBEMのルール</h2>\n\n<h3>\n<span id=\"blockブロック\" class=\"fragment\"></span><a href=\"#block%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>Block（ブロック）</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.header-nav</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"elementエレメント\" class=\"fragment\"></span><a href=\"#element%E3%82%A8%E3%83%AC%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>Element（エレメント）</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form__btn</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.header-nav__item</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.header-nav__item_link</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"modifierモディファイア\" class=\"fragment\"></span><a href=\"#modifier%E3%83%A2%E3%83%87%E3%82%A3%E3%83%95%E3%82%A1%E3%82%A4%E3%82%A2\"><i class=\"fa fa-link\"></i></a>Modifier（モディファイア）</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form__btn--state_hover</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"cssセレクタにタグ名を書かない\" class=\"fragment\"></span><a href=\"#css%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AB%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92%E6%9B%B8%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>CSSセレクタにタグ名を書かない</h3>\n\n<h4>\n<span id=\"ng\" class=\"fragment\"></span><a href=\"#ng\"><i class=\"fa fa-link\"></i></a>NG</h4>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"nc\">.user-list</span> <span class=\"p\">{}</span>\n    <span class=\"nc\">.user-list</span> <span class=\"o\">&gt;</span> <span class=\"nt\">li</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n<span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"user-list\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>name1<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>name2<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></div></div>\n\n<h4>\n<span id=\"ok\" class=\"fragment\"></span><a href=\"#ok\"><i class=\"fa fa-link\"></i></a>OK</h4>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"nc\">.user-list</span> <span class=\"p\">{}</span>\n    <span class=\"nc\">.user-list__item</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n<span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"user-list\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"user-list__item\"</span><span class=\"nt\">&gt;</span>name1<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"user-list__item\"</span><span class=\"nt\">&gt;</span>name2<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></div></div>\n\n<h2>\n<span id=\"標準的なbemの問題点\" class=\"fragment\"></span><a href=\"#%E6%A8%99%E6%BA%96%E7%9A%84%E3%81%AAbem%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>標準的なBEMの問題点</h2>\n\n<ol>\n<li>_を2重に書く必要があり、二つ書いたつもりという表記ミスを起こす可能性がある</li>\n<li>エレメントは_を2重、モデファイアは-を2重に書くため表記が長くなり、コーディングにも時間がかかる</li>\n<li>CSSセレクタにタグ名を書いてはいけないのでコーディングに時間がかかる</li>\n</ol>\n\n<h2>\n<span id=\"使いやすく改良したbem\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E3%82%84%E3%81%99%E3%81%8F%E6%94%B9%E8%89%AF%E3%81%97%E3%81%9Fbem\"><i class=\"fa fa-link\"></i></a>使いやすく改良したBEM</h2>\n\n<blockquote>\n<p>一貫した規則と機械可読性さえあれば各区切り文字は変えたり消したりしても良いことになっている</p>\n</blockquote>\n\n<p>とあるので、ルールに出来る限り沿って現場で使いやすく改良を試みる。</p>\n\n<h3>\n<span id=\"改良blockブロック\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFblock%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>【改良】Block（ブロック）</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.headerNav</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良elementエレメント改良後\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFelement%E3%82%A8%E3%83%AC%E3%83%A1%E3%83%B3%E3%83%88%E6%94%B9%E8%89%AF%E5%BE%8C\"><i class=\"fa fa-link\"></i></a>【改良】Element（エレメント）※改良後</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form_btn</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.headerNav_item</span> <span class=\"p\">{}</span>\n<span class=\"nc\">.headerNav_itemLink</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良modifierモディファイア改良後\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFmodifier%E3%83%A2%E3%83%87%E3%82%A3%E3%83%95%E3%82%A1%E3%82%A4%E3%82%A2%E6%94%B9%E8%89%AF%E5%BE%8C\"><i class=\"fa fa-link\"></i></a>【改良】Modifier（モディファイア）※改良後</h3>\n\n<div class=\"code-frame\" data-lang=\"css\"><div class=\"highlight\"><pre>\n<span class=\"nc\">.form_btn-stateHover</span> <span class=\"p\">{}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良cssセレクタにタグ名を書いて良いことにする\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFcss%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AB%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E8%89%AF%E3%81%84%E3%81%93%E3%81%A8%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>【改良】CSSセレクタにタグ名を書いて良いことにする</h3>\n\n<p>ulの子セレクタはliに決まっているし、さらに中にブロック、エレメントが入らないと分かっている場合はタグ名を入れて良いルールに変更<br><br>\nただ、このルールは規約違反なので、しっかりとチーム内で共有する必要がある。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"nc\">.userList</span> <span class=\"p\">{}</span>\n    <span class=\"nc\">.userList</span> <span class=\"o\">&gt;</span> <span class=\"nt\">li</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n<span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"userList\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>name1<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>name2<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良idも同様のルール\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFid%E3%82%82%E5%90%8C%E6%A7%98%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>【改良】IDも同様のルール</h3>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"nf\">#searchForm</span> <span class=\"p\">{}</span>\n    <span class=\"nf\">#searchForm</span> <span class=\"nc\">.serchForm_btn</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">id=</span><span class=\"s\">\"searchForm\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">class=</span><span class=\"s\">\"serchForm_btn\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良classのセレクタは一つに留める\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AFclass%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AF%E4%B8%80%E3%81%A4%E3%81%AB%E7%95%99%E3%82%81%E3%82%8B\"><i class=\"fa fa-link\"></i></a>【改良】classのセレクタは一つに留める</h3>\n\n<h4>\n<span id=\"ng-1\" class=\"fragment\"></span><a href=\"#ng-1\"><i class=\"fa fa-link\"></i></a>NG</h4>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n  <span class=\"nc\">.headerNav</span> <span class=\"p\">{}</span>\n  <span class=\"nc\">.headerNav</span> <span class=\"nc\">.headerNav_item</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div></div>\n\n<h4>\n<span id=\"ok-1\" class=\"fragment\"></span><a href=\"#ok-1\"><i class=\"fa fa-link\"></i></a>OK</h4>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;style&gt;</span>\n  <span class=\"nc\">.headerNav</span> <span class=\"p\">{}</span>\n  <span class=\"nc\">.headerNav_item</span> <span class=\"p\">{}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div></div>\n\n<h3>\n<span id=\"改良ファイル名も規約と統一する\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E8%89%AF%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%82%E8%A6%8F%E7%B4%84%E3%81%A8%E7%B5%B1%E4%B8%80%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>【改良】ファイル名も規約と統一する</h3>\n\n<ul>\n<li>ブロック名とエレメント名のみ書けばOK</li>\n<li>ブロック名とエレメント名の後は_をいくつ挟んでもOK</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n「class=\"ブロック名_エレメント名\"」 → 「ブロック名_エレメント名_画像名.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn_submit.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn_submit_off.gif」\n</pre></div></div>\n\n<ul>\n<li>画像名を書く必要のない場合は省略も可</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n「class=\"ブロック名_エレメント名\"」 → 「ブロック名_エレメント名.gif」\n「class=\"serchForm_btn\"」 → 「serchform_btn.gif」\n</pre></div></div>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://qiita.com/pugiemonn/items/964203782e1fcb3d02c3\" id=\"reference-04aee308eac33e77193e\">こんなHTMLとCSSのコーディング規約で書きたい</a></li>\n<li><a href=\"http://tsmd.hateblo.jp/entry/2013/12/12/004059\" rel=\"nofollow\" target=\"_blank\">実践 めんどうくさくない BEM</a></li>\n<li><a href=\"http://qiita.com/mrd-takahashi/items/07dc3b4bad027daa2884\" id=\"reference-4a4df9b964b5f9424770\">BEMを参考にしたCSS設計</a></li>\n</ul>\n",
    "stock_users": []
}, {
    "id": 421064,
    "uuid": "6f9013f793bdb6327c98",
    "user": {
        "id": 37873,
        "url_name": "TanakanoAnchan",
        "profile_image_url": "https://pbs.twimg.com/profile_images/1514275039/twitt_icon21_normal.jpg",
        "following": false
    },
    "title": "Google Chrome Developer Toolsを使ってcssを書き換える",
    "created_at": "2016-09-07 17:06:07 +0900",
    "updated_at": "2016-09-07 17:06:07 +0900",
    "created_at_in_words": "約22時間",
    "updated_at_in_words": "約22時間",
    "tags": [{
        "name": "CSS",
        "url_name": "css",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/b4438ce0a78810256791a266e87c74a76b555de1/medium.jpg?1419699326",
        "following": true,
        "versions": []
    }, {
        "name": "Chrome",
        "url_name": "chrome",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9af01a641a7b8761b171fef40b3ed0e2adb937bf/medium.jpg?1447575268",
        "following": false,
        "versions": []
    }, {
        "name": "ChromeDevTool",
        "url_name": "chromedevtool",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 5,
    "comment_count": 0,
    "url": "http://qiita.com/TanakanoAnchan/items/6f9013f793bdb6327c98",
    "created_at_as_seconds": 1473235567,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "\n## 背景\n\nこんにちは。ChromeのDeveloperToolはWeb開発に必須といわれていますが、いかんせん使用経験がありません＼(^o^)／\n\nいろいろなことができるようですが、まずはwebのcssを書き換えてみます。\n\n## 環境\n\n* GoogleChrome バージョン 53.0.2785.89 (64-bit)\n\n## 手順\nDeveloper Toolを開いて、簡単に編集できます。\n\n### cssを弄りたいページにアクセスする。\n\n例：https://www.google.co.jp\n\n### Developer Toolを開く\n\n右クリック -> 検証　で開きます。\nまた、macではcommand + alt + i でも開くことができます。\n\n### webページの要素とHTMLを紐付ける\n\n下記のアイコンです。昔は虫眼鏡だったようです。\n\n![スクリーンショット_2016-09-07_16_48_44.png](https://qiita-image-store.s3.amazonaws.com/0/37873/6dc3fa82-ba66-a596-ed7a-0241dcc465e2.png \"スクリーンショット_2016-09-07_16_48_44.png\")\n\n### 背景部分のマークアップに適用されているcssを書き換えてみる\n\n背景画像の部分は、下記でマークアップされているようです。\n\n```html:html本体\n...\n<div class=\"ctr-p\" id=\"viewport\">\n...\n```\n\n右側のペインの[Styles]タブに、選択した領域のcssがあります。\n実際には、bodyに色を設定していたようなので、この部分を変更してみます。（色は適当です）。\n\n\n要素をダブルクリックすれば、カーソルが有効になるので適当な値に変更しています。\n\n```css:変更したcss\nbody {\n    background: rgba(255,0,255,0.2);\n    color: #222;\n}\n```\n\n### before / after\n\n@before\n\n![スクリーンショット 2016-09-07 17.00.22.png](https://qiita-image-store.s3.amazonaws.com/0/37873/534d2e75-c3a1-9912-6550-b4b03bd6e325.png \"スクリーンショット 2016-09-07 17.00.22.png\")\n\n\n@after\n\n![スクリーンショット 2016-09-07 16.59.30.png](https://qiita-image-store.s3.amazonaws.com/0/37873/d17494c8-a422-1456-1138-c6d68f2d3758.png \"スクリーンショット 2016-09-07 16.59.30.png\")\n\n簡単に変更できます。\n実際には、作ったwebページにcssがあたっているか、パラメータを変えたら見た目がどう変わるかなど、確認しつつ作業していくのに使っていきます。\n\n\n## 参考資料\n\n[Chrome DevTools Overview - Google Chrome](https://developer.chrome.com/devtools)\n\n",
    "body": "\n<h2>\n<span id=\"背景\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>背景</h2>\n\n<p>こんにちは。ChromeのDeveloperToolはWeb開発に必須といわれていますが、いかんせん使用経験がありません＼(^o^)／</p>\n\n<p>いろいろなことができるようですが、まずはwebのcssを書き換えてみます。</p>\n\n<h2>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h2>\n\n<ul>\n<li>GoogleChrome バージョン 53.0.2785.89 (64-bit)</li>\n</ul>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<p>Developer Toolを開いて、簡単に編集できます。</p>\n\n<h3>\n<span id=\"cssを弄りたいページにアクセスする\" class=\"fragment\"></span><a href=\"#css%E3%82%92%E5%BC%84%E3%82%8A%E3%81%9F%E3%81%84%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>cssを弄りたいページにアクセスする。</h3>\n\n<p>例：<a href=\"https://www.google.co.jp\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">https://www.google.co.jp</a></p>\n\n<h3>\n<span id=\"developer-toolを開く\" class=\"fragment\"></span><a href=\"#developer-tool%E3%82%92%E9%96%8B%E3%81%8F\"><i class=\"fa fa-link\"></i></a>Developer Toolを開く</h3>\n\n<p>右クリック -&gt; 検証　で開きます。<br>\nまた、macではcommand + alt + i でも開くことができます。</p>\n\n<h3>\n<span id=\"webページの要素とhtmlを紐付ける\" class=\"fragment\"></span><a href=\"#web%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%A8html%E3%82%92%E7%B4%90%E4%BB%98%E3%81%91%E3%82%8B\"><i class=\"fa fa-link\"></i></a>webページの要素とHTMLを紐付ける</h3>\n\n<p>下記のアイコンです。昔は虫眼鏡だったようです。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/37873/6dc3fa82-ba66-a596-ed7a-0241dcc465e2.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/37873/6dc3fa82-ba66-a596-ed7a-0241dcc465e2.png\" alt=\"スクリーンショット_2016-09-07_16_48_44.png\" title=\"スクリーンショット_2016-09-07_16_48_44.png\"></a></p>\n\n<h3>\n<span id=\"背景部分のマークアップに適用されているcssを書き換えてみる\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF%E9%83%A8%E5%88%86%E3%81%AE%E3%83%9E%E3%83%BC%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bcss%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>背景部分のマークアップに適用されているcssを書き換えてみる</h3>\n\n<p>背景画像の部分は、下記でマークアップされているようです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">html本体</span></div>\n<div class=\"highlight\"><pre>\n...\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ctr-p\"</span> <span class=\"na\">id=</span><span class=\"s\">\"viewport\"</span><span class=\"nt\">&gt;</span>\n...\n</pre></div>\n</div>\n\n<p>右側のペインの[Styles]タブに、選択した領域のcssがあります。<br>\n実際には、bodyに色を設定していたようなので、この部分を変更してみます。（色は適当です）。</p>\n\n<p>要素をダブルクリックすれば、カーソルが有効になるので適当な値に変更しています。</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">変更したcss</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">255</span><span class=\"o\">,</span><span class=\"m\">0</span><span class=\"o\">,</span><span class=\"m\">255</span><span class=\"o\">,</span><span class=\"m\">0</span><span class=\"o\">.</span><span class=\"m\">2</span><span class=\"p\">);</span>\n    <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#222</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"before--after\" class=\"fragment\"></span><a href=\"#before--after\"><i class=\"fa fa-link\"></i></a>before / after</h3>\n\n<p><a href=\"/before\" class=\"user-mention js-hovercard\" title=\"before\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"before\">@before</a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/37873/534d2e75-c3a1-9912-6550-b4b03bd6e325.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/37873/534d2e75-c3a1-9912-6550-b4b03bd6e325.png\" alt=\"スクリーンショット 2016-09-07 17.00.22.png\" title=\"スクリーンショット 2016-09-07 17.00.22.png\"></a></p>\n\n<p><a href=\"/after\" class=\"user-mention js-hovercard\" title=\"after\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"after\">@after</a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/37873/d17494c8-a422-1456-1138-c6d68f2d3758.png\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/37873/d17494c8-a422-1456-1138-c6d68f2d3758.png\" alt=\"スクリーンショット 2016-09-07 16.59.30.png\" title=\"スクリーンショット 2016-09-07 16.59.30.png\"></a></p>\n\n<p>簡単に変更できます。<br>\n実際には、作ったwebページにcssがあたっているか、パラメータを変えたら見た目がどう変わるかなど、確認しつつ作業していくのに使っていきます。</p>\n\n<h2>\n<span id=\"参考資料\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"><i class=\"fa fa-link\"></i></a>参考資料</h2>\n\n<p><a href=\"https://developer.chrome.com/devtools\" rel=\"nofollow\" target=\"_blank\">Chrome DevTools Overview - Google Chrome</a></p>\n",
    "stock_users": [
        "ryurock",
        "Luecy1",
        "sr1994lu",
        "teremasune",
        "tatatata"
    ]
}, {
    "id": 421054,
    "uuid": "4bd5242d414e4e362acb",
    "user": {
        "id": 121388,
        "url_name": "nanda_kobayashi",
        "profile_image_url": "https://secure.gravatar.com/avatar/60d3663824813bca277f19fb5251063e",
        "following": false
    },
    "title": " OpenLayers 3で表示中の地図の端の緯度経度を取得する",
    "created_at": "2016-09-07 16:55:07 +0900",
    "updated_at": "2016-09-07 16:55:07 +0900",
    "created_at_in_words": "約22時間",
    "updated_at_in_words": "約22時間",
    "tags": [{
        "name": "JavaScript",
        "url_name": "javascript",
        "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838",
        "following": true,
        "versions": []
    }, {
        "name": "地図",
        "url_name": "%e5%9c%b0%e5%9b%b3",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }, {
        "name": "Openlayers",
        "url_name": "openlayers",
        "icon_url": "icons/medium/missing.png",
        "following": false,
        "versions": []
    }],
    "stock_count": 0,
    "comment_count": 0,
    "url": "http://qiita.com/nanda_kobayashi/items/4bd5242d414e4e362acb",
    "created_at_as_seconds": 1473234907,
    "tweet": false,
    "gist_url": null,
    "private": false,
    "stocked": false,
    "raw_body": "```\n// 表示している地図の端の座標を取得する\n\nvar extent = map.getView().calculateExtent(map.getSize());\nvar bottomLeft = ol.proj.transform(ol.extent.getBottomLeft(extent),\n    'EPSG:3857', 'EPSG:4326');\nvar topRight = ol.proj.transform(ol.extent.getTopRight(extent),\n    'EPSG:3857', 'EPSG:4326');\nvar endof_left   = wrapLon(bottomLeft[0]);\nvar endof_bottom = bottomLeft[1];\nvar endof_right  = wrapLon(topRight[0]);\nvar endof_top    = topRight[1];\n\nconsole.log(endof_left);\nconsole.log(endof_bottom);\n\nconsole.log(endof_right);\nconsole.log(endof_top);\n\nfunction wrapLon(value) {\n\tvar worlds = Math.floor((value + 180) / 360);\n\treturn value - (worlds * 360);\n}\n```\n\n(参考)\nhttp://openlayers.org/en/latest/examples/moveend.html\n",
    "body": "<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n// 表示している地図の端の座標を取得する\n\nvar extent = map.getView().calculateExtent(map.getSize());\nvar bottomLeft = ol.proj.transform(ol.extent.getBottomLeft(extent),\n    'EPSG:3857', 'EPSG:4326');\nvar topRight = ol.proj.transform(ol.extent.getTopRight(extent),\n    'EPSG:3857', 'EPSG:4326');\nvar endof_left   = wrapLon(bottomLeft[0]);\nvar endof_bottom = bottomLeft[1];\nvar endof_right  = wrapLon(topRight[0]);\nvar endof_top    = topRight[1];\n\nconsole.log(endof_left);\nconsole.log(endof_bottom);\n\nconsole.log(endof_right);\nconsole.log(endof_top);\n\nfunction wrapLon(value) {\n    var worlds = Math.floor((value + 180) / 360);\n    return value - (worlds * 360);\n}\n</pre></div></div>\n\n<p>(参考)<br>\n<a href=\"http://openlayers.org/en/latest/examples/moveend.html\" class=\"autolink\" rel=\"nofollow\" target=\"_blank\">http://openlayers.org/en/latest/examples/moveend.html</a></p>\n",
    "stock_users": []
}]
